// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Sheets API (sheets/v4)
// Description:
//   Reads and writes Google Sheets.
// Documentation:
//   https://developers.google.com/sheets/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSheetsObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// dateTimeRenderOption

/**
 *  Instructs date, time, datetime, and duration fields to be output as strings
 *  in their given number format (which depends on the spreadsheet locale).
 *
 *  Value: "FORMATTED_STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsDateTimeRenderOptionFormattedString;
/**
 *  Instructs date, time, datetime, and duration fields to be output as doubles
 *  in "serial number" format, as popularized by Lotus 1-2-3. The whole number
 *  portion of the value (left of the decimal) counts the days since December
 *  30th 1899. The fractional portion (right of the decimal) counts the time as
 *  a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2
 *  because it's 2 days after December 30th 1899, and .5 because noon is half a
 *  day. February 1st 1900 at 3pm would be 33.625. This correctly treats the
 *  year 1900 as not a leap year.
 *
 *  Value: "SERIAL_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsDateTimeRenderOptionSerialNumber;

// ----------------------------------------------------------------------------
// insertDataOption

/**
 *  Rows are inserted for the new data.
 *
 *  Value: "INSERT_ROWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsInsertDataOptionInsertRows;
/**
 *  The new data overwrites existing data in the areas it is written. (Note:
 *  adding data to the end of the sheet will still insert new rows or columns so
 *  the data can be written.)
 *
 *  Value: "OVERWRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsInsertDataOptionOverwrite;

// ----------------------------------------------------------------------------
// majorDimension

/**
 *  Operates on the columns of a sheet.
 *
 *  Value: "COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsMajorDimensionColumns;
/**
 *  The default value, do not use.
 *
 *  Value: "DIMENSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsMajorDimensionDimensionUnspecified;
/**
 *  Operates on the rows of a sheet.
 *
 *  Value: "ROWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsMajorDimensionRows;

// ----------------------------------------------------------------------------
// responseDateTimeRenderOption

/**
 *  Instructs date, time, datetime, and duration fields to be output as strings
 *  in their given number format (which depends on the spreadsheet locale).
 *
 *  Value: "FORMATTED_STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsResponseDateTimeRenderOptionFormattedString;
/**
 *  Instructs date, time, datetime, and duration fields to be output as doubles
 *  in "serial number" format, as popularized by Lotus 1-2-3. The whole number
 *  portion of the value (left of the decimal) counts the days since December
 *  30th 1899. The fractional portion (right of the decimal) counts the time as
 *  a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2
 *  because it's 2 days after December 30th 1899, and .5 because noon is half a
 *  day. February 1st 1900 at 3pm would be 33.625. This correctly treats the
 *  year 1900 as not a leap year.
 *
 *  Value: "SERIAL_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsResponseDateTimeRenderOptionSerialNumber;

// ----------------------------------------------------------------------------
// responseValueRenderOption

/**
 *  Values will be calculated & formatted in the response according to the
 *  cell's formatting. Formatting is based on the spreadsheet's locale, not the
 *  requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1`
 *  and formatted as currency, then `A2` would return `"$1.23"`.
 *
 *  Value: "FORMATTED_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsResponseValueRenderOptionFormattedValue;
/**
 *  Values will not be calculated. The reply will include the formulas. For
 *  example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then
 *  A2 would return `"=A1"`. Sheets treats date and time values as decimal
 *  values. This lets you perform arithmetic on them in formulas. For more
 *  information on interpreting date and time values, see [About date & time
 *  values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
 *
 *  Value: "FORMULA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsResponseValueRenderOptionFormula;
/**
 *  Values will be calculated, but not formatted in the reply. For example, if
 *  `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would
 *  return the number `1.23`.
 *
 *  Value: "UNFORMATTED_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsResponseValueRenderOptionUnformattedValue;

// ----------------------------------------------------------------------------
// valueInputOption

/**
 *  Default input value. This value must not be used.
 *
 *  Value: "INPUT_VALUE_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsValueInputOptionInputValueOptionUnspecified;
/**
 *  The values the user has entered will not be parsed and will be stored as-is.
 *
 *  Value: "RAW"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsValueInputOptionRaw;
/**
 *  The values will be parsed as if the user typed them into the UI. Numbers
 *  will stay as numbers, but strings may be converted to numbers, dates, etc.
 *  following the same rules that are applied when entering text into a cell via
 *  the Google Sheets UI.
 *
 *  Value: "USER_ENTERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsValueInputOptionUserEntered;

// ----------------------------------------------------------------------------
// valueRenderOption

/**
 *  Values will be calculated & formatted in the response according to the
 *  cell's formatting. Formatting is based on the spreadsheet's locale, not the
 *  requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1`
 *  and formatted as currency, then `A2` would return `"$1.23"`.
 *
 *  Value: "FORMATTED_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsValueRenderOptionFormattedValue;
/**
 *  Values will not be calculated. The reply will include the formulas. For
 *  example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then
 *  A2 would return `"=A1"`. Sheets treats date and time values as decimal
 *  values. This lets you perform arithmetic on them in formulas. For more
 *  information on interpreting date and time values, see [About date & time
 *  values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
 *
 *  Value: "FORMULA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsValueRenderOptionFormula;
/**
 *  Values will be calculated, but not formatted in the reply. For example, if
 *  `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would
 *  return the number `1.23`.
 *
 *  Value: "UNFORMATTED_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSheetsValueRenderOptionUnformattedValue;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Sheets query classes.
 */
@interface GTLRSheetsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Applies one or more updates to the spreadsheet. Each request is validated
 *  before being applied. If any request is not valid then the entire request
 *  will fail and nothing will be applied. Some requests have replies to give
 *  you some information about how they are applied. The replies will mirror the
 *  requests. For example, if you applied 4 updates and the 3rd one had a reply,
 *  then the response will have 2 empty replies, the actual reply, and another
 *  empty reply, in that order. Due to the collaborative nature of spreadsheets,
 *  it is not guaranteed that the spreadsheet will reflect exactly your changes
 *  after this completes, however it is guaranteed that the updates in the
 *  request will be applied together atomically. Your changes may be altered
 *  with respect to collaborator changes. If there are no collaborators, the
 *  spreadsheet should reflect your changes.
 *
 *  Method: sheets.spreadsheets.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsBatchUpdate : GTLRSheetsQuery

/** The spreadsheet to apply the updates to. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_BatchUpdateSpreadsheetResponse.
 *
 *  Applies one or more updates to the spreadsheet. Each request is validated
 *  before being applied. If any request is not valid then the entire request
 *  will fail and nothing will be applied. Some requests have replies to give
 *  you some information about how they are applied. The replies will mirror the
 *  requests. For example, if you applied 4 updates and the 3rd one had a reply,
 *  then the response will have 2 empty replies, the actual reply, and another
 *  empty reply, in that order. Due to the collaborative nature of spreadsheets,
 *  it is not guaranteed that the spreadsheet will reflect exactly your changes
 *  after this completes, however it is guaranteed that the updates in the
 *  request will be applied together atomically. Your changes may be altered
 *  with respect to collaborator changes. If there are no collaborators, the
 *  spreadsheet should reflect your changes.
 *
 *  @param object The @c GTLRSheets_BatchUpdateSpreadsheetRequest to include in
 *    the query.
 *  @param spreadsheetId The spreadsheet to apply the updates to.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRSheets_BatchUpdateSpreadsheetRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Creates a spreadsheet, returning the newly created spreadsheet.
 *
 *  Method: sheets.spreadsheets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsCreate : GTLRSheetsQuery

/**
 *  Fetches a @c GTLRSheets_Spreadsheet.
 *
 *  Creates a spreadsheet, returning the newly created spreadsheet.
 *
 *  @param object The @c GTLRSheets_Spreadsheet to include in the query.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsCreate
 */
+ (instancetype)queryWithObject:(GTLRSheets_Spreadsheet *)object;

@end

/**
 *  Returns the developer metadata with the specified ID. The caller must
 *  specify the spreadsheet ID and the developer metadata's unique metadataId.
 *
 *  Method: sheets.spreadsheets.developerMetadata.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsDeveloperMetadataGet : GTLRSheetsQuery

/** The ID of the developer metadata to retrieve. */
@property(nonatomic, assign) NSInteger metadataId;

/** The ID of the spreadsheet to retrieve metadata from. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_DeveloperMetadata.
 *
 *  Returns the developer metadata with the specified ID. The caller must
 *  specify the spreadsheet ID and the developer metadata's unique metadataId.
 *
 *  @param spreadsheetId The ID of the spreadsheet to retrieve metadata from.
 *  @param metadataId The ID of the developer metadata to retrieve.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsDeveloperMetadataGet
 */
+ (instancetype)queryWithSpreadsheetId:(NSString *)spreadsheetId
                            metadataId:(NSInteger)metadataId;

@end

/**
 *  Returns all developer metadata matching the specified DataFilter. If the
 *  provided DataFilter represents a DeveloperMetadataLookup object, this will
 *  return all DeveloperMetadata entries selected by it. If the DataFilter
 *  represents a location in a spreadsheet, this will return all developer
 *  metadata associated with locations intersecting that region.
 *
 *  Method: sheets.spreadsheets.developerMetadata.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsDeveloperMetadataSearch : GTLRSheetsQuery

/** The ID of the spreadsheet to retrieve metadata from. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_SearchDeveloperMetadataResponse.
 *
 *  Returns all developer metadata matching the specified DataFilter. If the
 *  provided DataFilter represents a DeveloperMetadataLookup object, this will
 *  return all DeveloperMetadata entries selected by it. If the DataFilter
 *  represents a location in a spreadsheet, this will return all developer
 *  metadata associated with locations intersecting that region.
 *
 *  @param object The @c GTLRSheets_SearchDeveloperMetadataRequest to include in
 *    the query.
 *  @param spreadsheetId The ID of the spreadsheet to retrieve metadata from.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsDeveloperMetadataSearch
 */
+ (instancetype)queryWithObject:(GTLRSheets_SearchDeveloperMetadataRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Returns the spreadsheet at the given ID. The caller must specify the
 *  spreadsheet ID. By default, data within grids is not returned. You can
 *  include grid data in one of 2 ways: * Specify a [field
 *  mask](https://developers.google.com/sheets/api/guides/field-masks) listing
 *  your desired fields using the `fields` URL parameter in HTTP * Set the
 *  includeGridData URL parameter to true. If a field mask is set, the
 *  `includeGridData` parameter is ignored For large spreadsheets, as a best
 *  practice, retrieve only the specific spreadsheet fields that you want. To
 *  retrieve only subsets of spreadsheet data, use the ranges URL parameter.
 *  Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell).
 *  You can define a single cell (for example, `A1`) or multiple cells (for
 *  example, `A1:D5`). You can also get cells from other sheets within the same
 *  spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at
 *  once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range
 *  returns only the portions of the spreadsheet that intersect the requested
 *  ranges.
 *
 *  Method: sheets.spreadsheets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsDriveReadonly
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 *    @c kGTLRAuthScopeSheetsSpreadsheetsReadonly
 */
@interface GTLRSheetsQuery_SpreadsheetsGet : GTLRSheetsQuery

/**
 *  True if grid data should be returned. This parameter is ignored if a field
 *  mask was set in the request.
 */
@property(nonatomic, assign) BOOL includeGridData;

/** The ranges to retrieve from the spreadsheet. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ranges;

/** The spreadsheet to request. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_Spreadsheet.
 *
 *  Returns the spreadsheet at the given ID. The caller must specify the
 *  spreadsheet ID. By default, data within grids is not returned. You can
 *  include grid data in one of 2 ways: * Specify a [field
 *  mask](https://developers.google.com/sheets/api/guides/field-masks) listing
 *  your desired fields using the `fields` URL parameter in HTTP * Set the
 *  includeGridData URL parameter to true. If a field mask is set, the
 *  `includeGridData` parameter is ignored For large spreadsheets, as a best
 *  practice, retrieve only the specific spreadsheet fields that you want. To
 *  retrieve only subsets of spreadsheet data, use the ranges URL parameter.
 *  Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell).
 *  You can define a single cell (for example, `A1`) or multiple cells (for
 *  example, `A1:D5`). You can also get cells from other sheets within the same
 *  spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at
 *  once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range
 *  returns only the portions of the spreadsheet that intersect the requested
 *  ranges.
 *
 *  @param spreadsheetId The spreadsheet to request.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsGet
 */
+ (instancetype)queryWithSpreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Returns the spreadsheet at the given ID. The caller must specify the
 *  spreadsheet ID. This method differs from GetSpreadsheet in that it allows
 *  selecting which subsets of spreadsheet data to return by specifying a
 *  dataFilters parameter. Multiple DataFilters can be specified. Specifying one
 *  or more data filters returns the portions of the spreadsheet that intersect
 *  ranges matched by any of the filters. By default, data within grids is not
 *  returned. You can include grid data one of 2 ways: * Specify a [field
 *  mask](https://developers.google.com/sheets/api/guides/field-masks) listing
 *  your desired fields using the `fields` URL parameter in HTTP * Set the
 *  includeGridData parameter to true. If a field mask is set, the
 *  `includeGridData` parameter is ignored For large spreadsheets, as a best
 *  practice, retrieve only the specific spreadsheet fields that you want.
 *
 *  Method: sheets.spreadsheets.getByDataFilter
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsGetByDataFilter : GTLRSheetsQuery

/** The spreadsheet to request. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_Spreadsheet.
 *
 *  Returns the spreadsheet at the given ID. The caller must specify the
 *  spreadsheet ID. This method differs from GetSpreadsheet in that it allows
 *  selecting which subsets of spreadsheet data to return by specifying a
 *  dataFilters parameter. Multiple DataFilters can be specified. Specifying one
 *  or more data filters returns the portions of the spreadsheet that intersect
 *  ranges matched by any of the filters. By default, data within grids is not
 *  returned. You can include grid data one of 2 ways: * Specify a [field
 *  mask](https://developers.google.com/sheets/api/guides/field-masks) listing
 *  your desired fields using the `fields` URL parameter in HTTP * Set the
 *  includeGridData parameter to true. If a field mask is set, the
 *  `includeGridData` parameter is ignored For large spreadsheets, as a best
 *  practice, retrieve only the specific spreadsheet fields that you want.
 *
 *  @param object The @c GTLRSheets_GetSpreadsheetByDataFilterRequest to include
 *    in the query.
 *  @param spreadsheetId The spreadsheet to request.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsGetByDataFilter
 */
+ (instancetype)queryWithObject:(GTLRSheets_GetSpreadsheetByDataFilterRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Copies a single sheet from a spreadsheet to another spreadsheet. Returns the
 *  properties of the newly created sheet.
 *
 *  Method: sheets.spreadsheets.sheets.copyTo
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsSheetsCopyTo : GTLRSheetsQuery

/** The ID of the sheet to copy. */
@property(nonatomic, assign) NSInteger sheetId;

/** The ID of the spreadsheet containing the sheet to copy. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_SheetProperties.
 *
 *  Copies a single sheet from a spreadsheet to another spreadsheet. Returns the
 *  properties of the newly created sheet.
 *
 *  @param object The @c GTLRSheets_CopySheetToAnotherSpreadsheetRequest to
 *    include in the query.
 *  @param spreadsheetId The ID of the spreadsheet containing the sheet to copy.
 *  @param sheetId The ID of the sheet to copy.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsSheetsCopyTo
 */
+ (instancetype)queryWithObject:(GTLRSheets_CopySheetToAnotherSpreadsheetRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId
                        sheetId:(NSInteger)sheetId;

@end

/**
 *  Appends values to a spreadsheet. The input range is used to search for
 *  existing data and find a "table" within that range. Values will be appended
 *  to the next row of the table, starting with the first column of the table.
 *  See the [guide](/sheets/api/guides/values#appending_values) and [sample
 *  code](/sheets/api/samples/writing#append_values) for specific details of how
 *  tables are detected and data is appended. The caller must specify the
 *  spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only
 *  controls how the input data will be added to the sheet (column-wise or
 *  row-wise), it does not influence what cell the data starts being written to.
 *
 *  Method: sheets.spreadsheets.values.append
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesAppend : GTLRSheetsQuery

/**
 *  Determines if the update response should include the values of the cells
 *  that were appended. By default, responses do not include the updated values.
 */
@property(nonatomic, assign) BOOL includeValuesInResponse;

/**
 *  How the input data should be inserted.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsInsertDataOptionOverwrite The new data overwrites
 *        existing data in the areas it is written. (Note: adding data to the
 *        end of the sheet will still insert new rows or columns so the data can
 *        be written.) (Value: "OVERWRITE")
 *    @arg @c kGTLRSheetsInsertDataOptionInsertRows Rows are inserted for the
 *        new data. (Value: "INSERT_ROWS")
 */
@property(nonatomic, copy, nullable) NSString *insertDataOption;

/**
 *  The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for
 *  a logical table of data. Values are appended after the last row of the
 *  table.
 */
@property(nonatomic, copy, nullable) NSString *range;

/**
 *  Determines how dates, times, and durations in the response should be
 *  rendered. This is ignored if response_value_render_option is
 *  FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsResponseDateTimeRenderOptionSerialNumber Instructs
 *        date, time, datetime, and duration fields to be output as doubles in
 *        "serial number" format, as popularized by Lotus 1-2-3. The whole
 *        number portion of the value (left of the decimal) counts the days
 *        since December 30th 1899. The fractional portion (right of the
 *        decimal) counts the time as a fraction of the day. For example,
 *        January 1st 1900 at noon would be 2.5, 2 because it's 2 days after
 *        December 30th 1899, and .5 because noon is half a day. February 1st
 *        1900 at 3pm would be 33.625. This correctly treats the year 1900 as
 *        not a leap year. (Value: "SERIAL_NUMBER")
 *    @arg @c kGTLRSheetsResponseDateTimeRenderOptionFormattedString Instructs
 *        date, time, datetime, and duration fields to be output as strings in
 *        their given number format (which depends on the spreadsheet locale).
 *        (Value: "FORMATTED_STRING")
 */
@property(nonatomic, copy, nullable) NSString *responseDateTimeRenderOption;

/**
 *  Determines how values in the response should be rendered. The default render
 *  option is FORMATTED_VALUE.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsResponseValueRenderOptionFormattedValue Values will be
 *        calculated & formatted in the response according to the cell's
 *        formatting. Formatting is based on the spreadsheet's locale, not the
 *        requesting user's locale. For example, if `A1` is `1.23` and `A2` is
 *        `=A1` and formatted as currency, then `A2` would return `"$1.23"`.
 *        (Value: "FORMATTED_VALUE")
 *    @arg @c kGTLRSheetsResponseValueRenderOptionUnformattedValue Values will
 *        be calculated, but not formatted in the reply. For example, if `A1` is
 *        `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would
 *        return the number `1.23`. (Value: "UNFORMATTED_VALUE")
 *    @arg @c kGTLRSheetsResponseValueRenderOptionFormula Values will not be
 *        calculated. The reply will include the formulas. For example, if `A1`
 *        is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would
 *        return `"=A1"`. Sheets treats date and time values as decimal values.
 *        This lets you perform arithmetic on them in formulas. For more
 *        information on interpreting date and time values, see [About date &
 *        time
 *        values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
 *        (Value: "FORMULA")
 */
@property(nonatomic, copy, nullable) NSString *responseValueRenderOption;

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  How the input data should be interpreted.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsValueInputOptionInputValueOptionUnspecified Default
 *        input value. This value must not be used. (Value:
 *        "INPUT_VALUE_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRSheetsValueInputOptionRaw The values the user has entered
 *        will not be parsed and will be stored as-is. (Value: "RAW")
 *    @arg @c kGTLRSheetsValueInputOptionUserEntered The values will be parsed
 *        as if the user typed them into the UI. Numbers will stay as numbers,
 *        but strings may be converted to numbers, dates, etc. following the
 *        same rules that are applied when entering text into a cell via the
 *        Google Sheets UI. (Value: "USER_ENTERED")
 */
@property(nonatomic, copy, nullable) NSString *valueInputOption;

/**
 *  Fetches a @c GTLRSheets_AppendValuesResponse.
 *
 *  Appends values to a spreadsheet. The input range is used to search for
 *  existing data and find a "table" within that range. Values will be appended
 *  to the next row of the table, starting with the first column of the table.
 *  See the [guide](/sheets/api/guides/values#appending_values) and [sample
 *  code](/sheets/api/samples/writing#append_values) for specific details of how
 *  tables are detected and data is appended. The caller must specify the
 *  spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only
 *  controls how the input data will be added to the sheet (column-wise or
 *  row-wise), it does not influence what cell the data starts being written to.
 *
 *  @param object The @c GTLRSheets_ValueRange to include in the query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *  @param range The [A1 notation](/sheets/api/guides/concepts#cell) of a range
 *    to search for a logical table of data. Values are appended after the last
 *    row of the table.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesAppend
 */
+ (instancetype)queryWithObject:(GTLRSheets_ValueRange *)object
                  spreadsheetId:(NSString *)spreadsheetId
                          range:(NSString *)range;

@end

/**
 *  Clears one or more ranges of values from a spreadsheet. The caller must
 *  specify the spreadsheet ID and one or more ranges. Only values are cleared
 *  -- all other properties of the cell (such as formatting and data validation)
 *  are kept.
 *
 *  Method: sheets.spreadsheets.values.batchClear
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesBatchClear : GTLRSheetsQuery

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_BatchClearValuesResponse.
 *
 *  Clears one or more ranges of values from a spreadsheet. The caller must
 *  specify the spreadsheet ID and one or more ranges. Only values are cleared
 *  -- all other properties of the cell (such as formatting and data validation)
 *  are kept.
 *
 *  @param object The @c GTLRSheets_BatchClearValuesRequest to include in the
 *    query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesBatchClear
 */
+ (instancetype)queryWithObject:(GTLRSheets_BatchClearValuesRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Clears one or more ranges of values from a spreadsheet. The caller must
 *  specify the spreadsheet ID and one or more DataFilters. Ranges matching any
 *  of the specified data filters will be cleared. Only values are cleared --
 *  all other properties of the cell (such as formatting, data validation,
 *  etc..) are kept.
 *
 *  Method: sheets.spreadsheets.values.batchClearByDataFilter
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesBatchClearByDataFilter : GTLRSheetsQuery

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_BatchClearValuesByDataFilterResponse.
 *
 *  Clears one or more ranges of values from a spreadsheet. The caller must
 *  specify the spreadsheet ID and one or more DataFilters. Ranges matching any
 *  of the specified data filters will be cleared. Only values are cleared --
 *  all other properties of the cell (such as formatting, data validation,
 *  etc..) are kept.
 *
 *  @param object The @c GTLRSheets_BatchClearValuesByDataFilterRequest to
 *    include in the query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesBatchClearByDataFilter
 */
+ (instancetype)queryWithObject:(GTLRSheets_BatchClearValuesByDataFilterRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Returns one or more ranges of values from a spreadsheet. The caller must
 *  specify the spreadsheet ID and one or more ranges.
 *
 *  Method: sheets.spreadsheets.values.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsDriveReadonly
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 *    @c kGTLRAuthScopeSheetsSpreadsheetsReadonly
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesBatchGet : GTLRSheetsQuery

/**
 *  How dates, times, and durations should be represented in the output. This is
 *  ignored if value_render_option is FORMATTED_VALUE. The default dateTime
 *  render option is SERIAL_NUMBER.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsDateTimeRenderOptionSerialNumber Instructs date, time,
 *        datetime, and duration fields to be output as doubles in "serial
 *        number" format, as popularized by Lotus 1-2-3. The whole number
 *        portion of the value (left of the decimal) counts the days since
 *        December 30th 1899. The fractional portion (right of the decimal)
 *        counts the time as a fraction of the day. For example, January 1st
 *        1900 at noon would be 2.5, 2 because it's 2 days after December 30th
 *        1899, and .5 because noon is half a day. February 1st 1900 at 3pm
 *        would be 33.625. This correctly treats the year 1900 as not a leap
 *        year. (Value: "SERIAL_NUMBER")
 *    @arg @c kGTLRSheetsDateTimeRenderOptionFormattedString Instructs date,
 *        time, datetime, and duration fields to be output as strings in their
 *        given number format (which depends on the spreadsheet locale). (Value:
 *        "FORMATTED_STRING")
 */
@property(nonatomic, copy, nullable) NSString *dateTimeRenderOption;

/**
 *  The major dimension that results should use. For example, if the spreadsheet
 *  data is: `A1=1,B1=2,A2=3,B2=4`, then requesting
 *  `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas
 *  requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns
 *  `[[1,3],[2,4]]`.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsMajorDimensionDimensionUnspecified The default value,
 *        do not use. (Value: "DIMENSION_UNSPECIFIED")
 *    @arg @c kGTLRSheetsMajorDimensionRows Operates on the rows of a sheet.
 *        (Value: "ROWS")
 *    @arg @c kGTLRSheetsMajorDimensionColumns Operates on the columns of a
 *        sheet. (Value: "COLUMNS")
 */
@property(nonatomic, copy, nullable) NSString *majorDimension;

/**
 *  The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the
 *  range to retrieve values from.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ranges;

/** The ID of the spreadsheet to retrieve data from. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  How values should be represented in the output. The default render option is
 *  ValueRenderOption.FORMATTED_VALUE.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsValueRenderOptionFormattedValue Values will be
 *        calculated & formatted in the response according to the cell's
 *        formatting. Formatting is based on the spreadsheet's locale, not the
 *        requesting user's locale. For example, if `A1` is `1.23` and `A2` is
 *        `=A1` and formatted as currency, then `A2` would return `"$1.23"`.
 *        (Value: "FORMATTED_VALUE")
 *    @arg @c kGTLRSheetsValueRenderOptionUnformattedValue Values will be
 *        calculated, but not formatted in the reply. For example, if `A1` is
 *        `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would
 *        return the number `1.23`. (Value: "UNFORMATTED_VALUE")
 *    @arg @c kGTLRSheetsValueRenderOptionFormula Values will not be calculated.
 *        The reply will include the formulas. For example, if `A1` is `1.23`
 *        and `A2` is `=A1` and formatted as currency, then A2 would return
 *        `"=A1"`. Sheets treats date and time values as decimal values. This
 *        lets you perform arithmetic on them in formulas. For more information
 *        on interpreting date and time values, see [About date & time
 *        values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
 *        (Value: "FORMULA")
 */
@property(nonatomic, copy, nullable) NSString *valueRenderOption;

/**
 *  Fetches a @c GTLRSheets_BatchGetValuesResponse.
 *
 *  Returns one or more ranges of values from a spreadsheet. The caller must
 *  specify the spreadsheet ID and one or more ranges.
 *
 *  @param spreadsheetId The ID of the spreadsheet to retrieve data from.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesBatchGet
 */
+ (instancetype)queryWithSpreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Returns one or more ranges of values that match the specified data filters.
 *  The caller must specify the spreadsheet ID and one or more DataFilters.
 *  Ranges that match any of the data filters in the request will be returned.
 *
 *  Method: sheets.spreadsheets.values.batchGetByDataFilter
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesBatchGetByDataFilter : GTLRSheetsQuery

/** The ID of the spreadsheet to retrieve data from. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_BatchGetValuesByDataFilterResponse.
 *
 *  Returns one or more ranges of values that match the specified data filters.
 *  The caller must specify the spreadsheet ID and one or more DataFilters.
 *  Ranges that match any of the data filters in the request will be returned.
 *
 *  @param object The @c GTLRSheets_BatchGetValuesByDataFilterRequest to include
 *    in the query.
 *  @param spreadsheetId The ID of the spreadsheet to retrieve data from.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesBatchGetByDataFilter
 */
+ (instancetype)queryWithObject:(GTLRSheets_BatchGetValuesByDataFilterRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Sets values in one or more ranges of a spreadsheet. The caller must specify
 *  the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
 *
 *  Method: sheets.spreadsheets.values.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesBatchUpdate : GTLRSheetsQuery

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_BatchUpdateValuesResponse.
 *
 *  Sets values in one or more ranges of a spreadsheet. The caller must specify
 *  the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
 *
 *  @param object The @c GTLRSheets_BatchUpdateValuesRequest to include in the
 *    query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRSheets_BatchUpdateValuesRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Sets values in one or more ranges of a spreadsheet. The caller must specify
 *  the spreadsheet ID, a valueInputOption, and one or more
 *  DataFilterValueRanges.
 *
 *  Method: sheets.spreadsheets.values.batchUpdateByDataFilter
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesBatchUpdateByDataFilter : GTLRSheetsQuery

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_BatchUpdateValuesByDataFilterResponse.
 *
 *  Sets values in one or more ranges of a spreadsheet. The caller must specify
 *  the spreadsheet ID, a valueInputOption, and one or more
 *  DataFilterValueRanges.
 *
 *  @param object The @c GTLRSheets_BatchUpdateValuesByDataFilterRequest to
 *    include in the query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesBatchUpdateByDataFilter
 */
+ (instancetype)queryWithObject:(GTLRSheets_BatchUpdateValuesByDataFilterRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId;

@end

/**
 *  Clears values from a spreadsheet. The caller must specify the spreadsheet ID
 *  and range. Only values are cleared -- all other properties of the cell (such
 *  as formatting, data validation, etc..) are kept.
 *
 *  Method: sheets.spreadsheets.values.clear
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesClear : GTLRSheetsQuery

/**
 *  The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the
 *  values to clear.
 */
@property(nonatomic, copy, nullable) NSString *range;

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  Fetches a @c GTLRSheets_ClearValuesResponse.
 *
 *  Clears values from a spreadsheet. The caller must specify the spreadsheet ID
 *  and range. Only values are cleared -- all other properties of the cell (such
 *  as formatting, data validation, etc..) are kept.
 *
 *  @param object The @c GTLRSheets_ClearValuesRequest to include in the query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *  @param range The [A1 notation or R1C1
 *    notation](/sheets/api/guides/concepts#cell) of the values to clear.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesClear
 */
+ (instancetype)queryWithObject:(GTLRSheets_ClearValuesRequest *)object
                  spreadsheetId:(NSString *)spreadsheetId
                          range:(NSString *)range;

@end

/**
 *  Returns a range of values from a spreadsheet. The caller must specify the
 *  spreadsheet ID and a range.
 *
 *  Method: sheets.spreadsheets.values.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsDriveReadonly
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 *    @c kGTLRAuthScopeSheetsSpreadsheetsReadonly
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesGet : GTLRSheetsQuery

/**
 *  How dates, times, and durations should be represented in the output. This is
 *  ignored if value_render_option is FORMATTED_VALUE. The default dateTime
 *  render option is SERIAL_NUMBER.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsDateTimeRenderOptionSerialNumber Instructs date, time,
 *        datetime, and duration fields to be output as doubles in "serial
 *        number" format, as popularized by Lotus 1-2-3. The whole number
 *        portion of the value (left of the decimal) counts the days since
 *        December 30th 1899. The fractional portion (right of the decimal)
 *        counts the time as a fraction of the day. For example, January 1st
 *        1900 at noon would be 2.5, 2 because it's 2 days after December 30th
 *        1899, and .5 because noon is half a day. February 1st 1900 at 3pm
 *        would be 33.625. This correctly treats the year 1900 as not a leap
 *        year. (Value: "SERIAL_NUMBER")
 *    @arg @c kGTLRSheetsDateTimeRenderOptionFormattedString Instructs date,
 *        time, datetime, and duration fields to be output as strings in their
 *        given number format (which depends on the spreadsheet locale). (Value:
 *        "FORMATTED_STRING")
 */
@property(nonatomic, copy, nullable) NSString *dateTimeRenderOption;

/**
 *  The major dimension that results should use. For example, if the spreadsheet
 *  data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting
 *  `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas
 *  requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns
 *  `[[1,3],[2,4]]`.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsMajorDimensionDimensionUnspecified The default value,
 *        do not use. (Value: "DIMENSION_UNSPECIFIED")
 *    @arg @c kGTLRSheetsMajorDimensionRows Operates on the rows of a sheet.
 *        (Value: "ROWS")
 *    @arg @c kGTLRSheetsMajorDimensionColumns Operates on the columns of a
 *        sheet. (Value: "COLUMNS")
 */
@property(nonatomic, copy, nullable) NSString *majorDimension;

/**
 *  The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the
 *  range to retrieve values from.
 */
@property(nonatomic, copy, nullable) NSString *range;

/** The ID of the spreadsheet to retrieve data from. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  How values should be represented in the output. The default render option is
 *  FORMATTED_VALUE.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsValueRenderOptionFormattedValue Values will be
 *        calculated & formatted in the response according to the cell's
 *        formatting. Formatting is based on the spreadsheet's locale, not the
 *        requesting user's locale. For example, if `A1` is `1.23` and `A2` is
 *        `=A1` and formatted as currency, then `A2` would return `"$1.23"`.
 *        (Value: "FORMATTED_VALUE")
 *    @arg @c kGTLRSheetsValueRenderOptionUnformattedValue Values will be
 *        calculated, but not formatted in the reply. For example, if `A1` is
 *        `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would
 *        return the number `1.23`. (Value: "UNFORMATTED_VALUE")
 *    @arg @c kGTLRSheetsValueRenderOptionFormula Values will not be calculated.
 *        The reply will include the formulas. For example, if `A1` is `1.23`
 *        and `A2` is `=A1` and formatted as currency, then A2 would return
 *        `"=A1"`. Sheets treats date and time values as decimal values. This
 *        lets you perform arithmetic on them in formulas. For more information
 *        on interpreting date and time values, see [About date & time
 *        values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
 *        (Value: "FORMULA")
 */
@property(nonatomic, copy, nullable) NSString *valueRenderOption;

/**
 *  Fetches a @c GTLRSheets_ValueRange.
 *
 *  Returns a range of values from a spreadsheet. The caller must specify the
 *  spreadsheet ID and a range.
 *
 *  @param spreadsheetId The ID of the spreadsheet to retrieve data from.
 *  @param range The [A1 notation or R1C1
 *    notation](/sheets/api/guides/concepts#cell) of the range to retrieve
 *    values from.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesGet
 */
+ (instancetype)queryWithSpreadsheetId:(NSString *)spreadsheetId
                                 range:(NSString *)range;

@end

/**
 *  Sets values in a range of a spreadsheet. The caller must specify the
 *  spreadsheet ID, range, and a valueInputOption.
 *
 *  Method: sheets.spreadsheets.values.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSheetsDrive
 *    @c kGTLRAuthScopeSheetsDriveFile
 *    @c kGTLRAuthScopeSheetsSpreadsheets
 */
@interface GTLRSheetsQuery_SpreadsheetsValuesUpdate : GTLRSheetsQuery

/**
 *  Determines if the update response should include the values of the cells
 *  that were updated. By default, responses do not include the updated values.
 *  If the range to write was larger than the range actually written, the
 *  response includes all values in the requested range (excluding trailing
 *  empty rows and columns).
 */
@property(nonatomic, assign) BOOL includeValuesInResponse;

/**
 *  The [A1 notation](/sheets/api/guides/concepts#cell) of the values to update.
 */
@property(nonatomic, copy, nullable) NSString *range;

/**
 *  Determines how dates, times, and durations in the response should be
 *  rendered. This is ignored if response_value_render_option is
 *  FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsResponseDateTimeRenderOptionSerialNumber Instructs
 *        date, time, datetime, and duration fields to be output as doubles in
 *        "serial number" format, as popularized by Lotus 1-2-3. The whole
 *        number portion of the value (left of the decimal) counts the days
 *        since December 30th 1899. The fractional portion (right of the
 *        decimal) counts the time as a fraction of the day. For example,
 *        January 1st 1900 at noon would be 2.5, 2 because it's 2 days after
 *        December 30th 1899, and .5 because noon is half a day. February 1st
 *        1900 at 3pm would be 33.625. This correctly treats the year 1900 as
 *        not a leap year. (Value: "SERIAL_NUMBER")
 *    @arg @c kGTLRSheetsResponseDateTimeRenderOptionFormattedString Instructs
 *        date, time, datetime, and duration fields to be output as strings in
 *        their given number format (which depends on the spreadsheet locale).
 *        (Value: "FORMATTED_STRING")
 */
@property(nonatomic, copy, nullable) NSString *responseDateTimeRenderOption;

/**
 *  Determines how values in the response should be rendered. The default render
 *  option is FORMATTED_VALUE.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsResponseValueRenderOptionFormattedValue Values will be
 *        calculated & formatted in the response according to the cell's
 *        formatting. Formatting is based on the spreadsheet's locale, not the
 *        requesting user's locale. For example, if `A1` is `1.23` and `A2` is
 *        `=A1` and formatted as currency, then `A2` would return `"$1.23"`.
 *        (Value: "FORMATTED_VALUE")
 *    @arg @c kGTLRSheetsResponseValueRenderOptionUnformattedValue Values will
 *        be calculated, but not formatted in the reply. For example, if `A1` is
 *        `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would
 *        return the number `1.23`. (Value: "UNFORMATTED_VALUE")
 *    @arg @c kGTLRSheetsResponseValueRenderOptionFormula Values will not be
 *        calculated. The reply will include the formulas. For example, if `A1`
 *        is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would
 *        return `"=A1"`. Sheets treats date and time values as decimal values.
 *        This lets you perform arithmetic on them in formulas. For more
 *        information on interpreting date and time values, see [About date &
 *        time
 *        values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
 *        (Value: "FORMULA")
 */
@property(nonatomic, copy, nullable) NSString *responseValueRenderOption;

/** The ID of the spreadsheet to update. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

/**
 *  How the input data should be interpreted.
 *
 *  Likely values:
 *    @arg @c kGTLRSheetsValueInputOptionInputValueOptionUnspecified Default
 *        input value. This value must not be used. (Value:
 *        "INPUT_VALUE_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRSheetsValueInputOptionRaw The values the user has entered
 *        will not be parsed and will be stored as-is. (Value: "RAW")
 *    @arg @c kGTLRSheetsValueInputOptionUserEntered The values will be parsed
 *        as if the user typed them into the UI. Numbers will stay as numbers,
 *        but strings may be converted to numbers, dates, etc. following the
 *        same rules that are applied when entering text into a cell via the
 *        Google Sheets UI. (Value: "USER_ENTERED")
 */
@property(nonatomic, copy, nullable) NSString *valueInputOption;

/**
 *  Fetches a @c GTLRSheets_UpdateValuesResponse.
 *
 *  Sets values in a range of a spreadsheet. The caller must specify the
 *  spreadsheet ID, range, and a valueInputOption.
 *
 *  @param object The @c GTLRSheets_ValueRange to include in the query.
 *  @param spreadsheetId The ID of the spreadsheet to update.
 *  @param range The [A1 notation](/sheets/api/guides/concepts#cell) of the
 *    values to update.
 *
 *  @return GTLRSheetsQuery_SpreadsheetsValuesUpdate
 */
+ (instancetype)queryWithObject:(GTLRSheets_ValueRange *)object
                  spreadsheetId:(NSString *)spreadsheetId
                          range:(NSString *)range;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
