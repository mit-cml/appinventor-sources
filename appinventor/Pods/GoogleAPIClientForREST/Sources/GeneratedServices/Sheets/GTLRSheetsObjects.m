// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Sheets API (sheets/v4)
// Description:
//   Reads and writes Google Sheets.
// Documentation:
//   https://developers.google.com/sheets/

#import <GoogleAPIClientForREST/GTLRSheetsObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRSheets_AppendDimensionRequest.dimension
NSString * const kGTLRSheets_AppendDimensionRequest_Dimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_AppendDimensionRequest_Dimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_AppendDimensionRequest_Dimension_Rows = @"ROWS";

// GTLRSheets_BaselineValueFormat.comparisonType
NSString * const kGTLRSheets_BaselineValueFormat_ComparisonType_AbsoluteDifference = @"ABSOLUTE_DIFFERENCE";
NSString * const kGTLRSheets_BaselineValueFormat_ComparisonType_ComparisonTypeUndefined = @"COMPARISON_TYPE_UNDEFINED";
NSString * const kGTLRSheets_BaselineValueFormat_ComparisonType_PercentageDifference = @"PERCENTAGE_DIFFERENCE";

// GTLRSheets_BasicChartAxis.position
NSString * const kGTLRSheets_BasicChartAxis_Position_BasicChartAxisPositionUnspecified = @"BASIC_CHART_AXIS_POSITION_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartAxis_Position_BottomAxis = @"BOTTOM_AXIS";
NSString * const kGTLRSheets_BasicChartAxis_Position_LeftAxis  = @"LEFT_AXIS";
NSString * const kGTLRSheets_BasicChartAxis_Position_RightAxis = @"RIGHT_AXIS";

// GTLRSheets_BasicChartSeries.targetAxis
NSString * const kGTLRSheets_BasicChartSeries_TargetAxis_BasicChartAxisPositionUnspecified = @"BASIC_CHART_AXIS_POSITION_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartSeries_TargetAxis_BottomAxis = @"BOTTOM_AXIS";
NSString * const kGTLRSheets_BasicChartSeries_TargetAxis_LeftAxis = @"LEFT_AXIS";
NSString * const kGTLRSheets_BasicChartSeries_TargetAxis_RightAxis = @"RIGHT_AXIS";

// GTLRSheets_BasicChartSeries.type
NSString * const kGTLRSheets_BasicChartSeries_Type_Area        = @"AREA";
NSString * const kGTLRSheets_BasicChartSeries_Type_Bar         = @"BAR";
NSString * const kGTLRSheets_BasicChartSeries_Type_BasicChartTypeUnspecified = @"BASIC_CHART_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartSeries_Type_Column      = @"COLUMN";
NSString * const kGTLRSheets_BasicChartSeries_Type_Combo       = @"COMBO";
NSString * const kGTLRSheets_BasicChartSeries_Type_Line        = @"LINE";
NSString * const kGTLRSheets_BasicChartSeries_Type_Scatter     = @"SCATTER";
NSString * const kGTLRSheets_BasicChartSeries_Type_SteppedArea = @"STEPPED_AREA";

// GTLRSheets_BasicChartSpec.chartType
NSString * const kGTLRSheets_BasicChartSpec_ChartType_Area     = @"AREA";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_Bar      = @"BAR";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_BasicChartTypeUnspecified = @"BASIC_CHART_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_Column   = @"COLUMN";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_Combo    = @"COMBO";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_Line     = @"LINE";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_Scatter  = @"SCATTER";
NSString * const kGTLRSheets_BasicChartSpec_ChartType_SteppedArea = @"STEPPED_AREA";

// GTLRSheets_BasicChartSpec.compareMode
NSString * const kGTLRSheets_BasicChartSpec_CompareMode_BasicChartCompareModeUnspecified = @"BASIC_CHART_COMPARE_MODE_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartSpec_CompareMode_Category = @"CATEGORY";
NSString * const kGTLRSheets_BasicChartSpec_CompareMode_Datum  = @"DATUM";

// GTLRSheets_BasicChartSpec.legendPosition
NSString * const kGTLRSheets_BasicChartSpec_LegendPosition_BasicChartLegendPositionUnspecified = @"BASIC_CHART_LEGEND_POSITION_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartSpec_LegendPosition_BottomLegend = @"BOTTOM_LEGEND";
NSString * const kGTLRSheets_BasicChartSpec_LegendPosition_LeftLegend = @"LEFT_LEGEND";
NSString * const kGTLRSheets_BasicChartSpec_LegendPosition_NoLegend = @"NO_LEGEND";
NSString * const kGTLRSheets_BasicChartSpec_LegendPosition_RightLegend = @"RIGHT_LEGEND";
NSString * const kGTLRSheets_BasicChartSpec_LegendPosition_TopLegend = @"TOP_LEGEND";

// GTLRSheets_BasicChartSpec.stackedType
NSString * const kGTLRSheets_BasicChartSpec_StackedType_BasicChartStackedTypeUnspecified = @"BASIC_CHART_STACKED_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_BasicChartSpec_StackedType_NotStacked = @"NOT_STACKED";
NSString * const kGTLRSheets_BasicChartSpec_StackedType_PercentStacked = @"PERCENT_STACKED";
NSString * const kGTLRSheets_BasicChartSpec_StackedType_Stacked = @"STACKED";

// GTLRSheets_BatchGetValuesByDataFilterRequest.dateTimeRenderOption
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_DateTimeRenderOption_FormattedString = @"FORMATTED_STRING";
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_DateTimeRenderOption_SerialNumber = @"SERIAL_NUMBER";

// GTLRSheets_BatchGetValuesByDataFilterRequest.majorDimension
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_MajorDimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_MajorDimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_MajorDimension_Rows = @"ROWS";

// GTLRSheets_BatchGetValuesByDataFilterRequest.valueRenderOption
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_ValueRenderOption_FormattedValue = @"FORMATTED_VALUE";
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_ValueRenderOption_Formula = @"FORMULA";
NSString * const kGTLRSheets_BatchGetValuesByDataFilterRequest_ValueRenderOption_UnformattedValue = @"UNFORMATTED_VALUE";

// GTLRSheets_BatchUpdateValuesByDataFilterRequest.responseDateTimeRenderOption
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ResponseDateTimeRenderOption_FormattedString = @"FORMATTED_STRING";
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ResponseDateTimeRenderOption_SerialNumber = @"SERIAL_NUMBER";

// GTLRSheets_BatchUpdateValuesByDataFilterRequest.responseValueRenderOption
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ResponseValueRenderOption_FormattedValue = @"FORMATTED_VALUE";
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ResponseValueRenderOption_Formula = @"FORMULA";
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ResponseValueRenderOption_UnformattedValue = @"UNFORMATTED_VALUE";

// GTLRSheets_BatchUpdateValuesByDataFilterRequest.valueInputOption
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ValueInputOption_InputValueOptionUnspecified = @"INPUT_VALUE_OPTION_UNSPECIFIED";
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ValueInputOption_Raw = @"RAW";
NSString * const kGTLRSheets_BatchUpdateValuesByDataFilterRequest_ValueInputOption_UserEntered = @"USER_ENTERED";

// GTLRSheets_BatchUpdateValuesRequest.responseDateTimeRenderOption
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ResponseDateTimeRenderOption_FormattedString = @"FORMATTED_STRING";
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ResponseDateTimeRenderOption_SerialNumber = @"SERIAL_NUMBER";

// GTLRSheets_BatchUpdateValuesRequest.responseValueRenderOption
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ResponseValueRenderOption_FormattedValue = @"FORMATTED_VALUE";
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ResponseValueRenderOption_Formula = @"FORMULA";
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ResponseValueRenderOption_UnformattedValue = @"UNFORMATTED_VALUE";

// GTLRSheets_BatchUpdateValuesRequest.valueInputOption
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ValueInputOption_InputValueOptionUnspecified = @"INPUT_VALUE_OPTION_UNSPECIFIED";
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ValueInputOption_Raw = @"RAW";
NSString * const kGTLRSheets_BatchUpdateValuesRequest_ValueInputOption_UserEntered = @"USER_ENTERED";

// GTLRSheets_BooleanCondition.type
NSString * const kGTLRSheets_BooleanCondition_Type_Blank       = @"BLANK";
NSString * const kGTLRSheets_BooleanCondition_Type_Boolean     = @"BOOLEAN";
NSString * const kGTLRSheets_BooleanCondition_Type_ConditionTypeUnspecified = @"CONDITION_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_BooleanCondition_Type_CustomFormula = @"CUSTOM_FORMULA";
NSString * const kGTLRSheets_BooleanCondition_Type_DateAfter   = @"DATE_AFTER";
NSString * const kGTLRSheets_BooleanCondition_Type_DateBefore  = @"DATE_BEFORE";
NSString * const kGTLRSheets_BooleanCondition_Type_DateBetween = @"DATE_BETWEEN";
NSString * const kGTLRSheets_BooleanCondition_Type_DateEq      = @"DATE_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_DateIsValid = @"DATE_IS_VALID";
NSString * const kGTLRSheets_BooleanCondition_Type_DateNotBetween = @"DATE_NOT_BETWEEN";
NSString * const kGTLRSheets_BooleanCondition_Type_DateNotEq   = @"DATE_NOT_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_DateOnOrAfter = @"DATE_ON_OR_AFTER";
NSString * const kGTLRSheets_BooleanCondition_Type_DateOnOrBefore = @"DATE_ON_OR_BEFORE";
NSString * const kGTLRSheets_BooleanCondition_Type_FilterExpression = @"FILTER_EXPRESSION";
NSString * const kGTLRSheets_BooleanCondition_Type_NotBlank    = @"NOT_BLANK";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberBetween = @"NUMBER_BETWEEN";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberEq    = @"NUMBER_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberGreater = @"NUMBER_GREATER";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberGreaterThanEq = @"NUMBER_GREATER_THAN_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberLess  = @"NUMBER_LESS";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberLessThanEq = @"NUMBER_LESS_THAN_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberNotBetween = @"NUMBER_NOT_BETWEEN";
NSString * const kGTLRSheets_BooleanCondition_Type_NumberNotEq = @"NUMBER_NOT_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_OneOfList   = @"ONE_OF_LIST";
NSString * const kGTLRSheets_BooleanCondition_Type_OneOfRange  = @"ONE_OF_RANGE";
NSString * const kGTLRSheets_BooleanCondition_Type_TextContains = @"TEXT_CONTAINS";
NSString * const kGTLRSheets_BooleanCondition_Type_TextEndsWith = @"TEXT_ENDS_WITH";
NSString * const kGTLRSheets_BooleanCondition_Type_TextEq      = @"TEXT_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_TextIsEmail = @"TEXT_IS_EMAIL";
NSString * const kGTLRSheets_BooleanCondition_Type_TextIsUrl   = @"TEXT_IS_URL";
NSString * const kGTLRSheets_BooleanCondition_Type_TextNotContains = @"TEXT_NOT_CONTAINS";
NSString * const kGTLRSheets_BooleanCondition_Type_TextNotEq   = @"TEXT_NOT_EQ";
NSString * const kGTLRSheets_BooleanCondition_Type_TextStartsWith = @"TEXT_STARTS_WITH";

// GTLRSheets_Border.style
NSString * const kGTLRSheets_Border_Style_Dashed           = @"DASHED";
NSString * const kGTLRSheets_Border_Style_Dotted           = @"DOTTED";
NSString * const kGTLRSheets_Border_Style_Double           = @"DOUBLE";
NSString * const kGTLRSheets_Border_Style_None             = @"NONE";
NSString * const kGTLRSheets_Border_Style_Solid            = @"SOLID";
NSString * const kGTLRSheets_Border_Style_SolidMedium      = @"SOLID_MEDIUM";
NSString * const kGTLRSheets_Border_Style_SolidThick       = @"SOLID_THICK";
NSString * const kGTLRSheets_Border_Style_StyleUnspecified = @"STYLE_UNSPECIFIED";

// GTLRSheets_BubbleChartSpec.legendPosition
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_BottomLegend = @"BOTTOM_LEGEND";
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_BubbleChartLegendPositionUnspecified = @"BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED";
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_InsideLegend = @"INSIDE_LEGEND";
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_LeftLegend = @"LEFT_LEGEND";
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_NoLegend = @"NO_LEGEND";
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_RightLegend = @"RIGHT_LEGEND";
NSString * const kGTLRSheets_BubbleChartSpec_LegendPosition_TopLegend = @"TOP_LEGEND";

// GTLRSheets_CellFormat.horizontalAlignment
NSString * const kGTLRSheets_CellFormat_HorizontalAlignment_Center = @"CENTER";
NSString * const kGTLRSheets_CellFormat_HorizontalAlignment_HorizontalAlignUnspecified = @"HORIZONTAL_ALIGN_UNSPECIFIED";
NSString * const kGTLRSheets_CellFormat_HorizontalAlignment_Left = @"LEFT";
NSString * const kGTLRSheets_CellFormat_HorizontalAlignment_Right = @"RIGHT";

// GTLRSheets_CellFormat.hyperlinkDisplayType
NSString * const kGTLRSheets_CellFormat_HyperlinkDisplayType_HyperlinkDisplayTypeUnspecified = @"HYPERLINK_DISPLAY_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_CellFormat_HyperlinkDisplayType_Linked = @"LINKED";
NSString * const kGTLRSheets_CellFormat_HyperlinkDisplayType_PlainText = @"PLAIN_TEXT";

// GTLRSheets_CellFormat.textDirection
NSString * const kGTLRSheets_CellFormat_TextDirection_LeftToRight = @"LEFT_TO_RIGHT";
NSString * const kGTLRSheets_CellFormat_TextDirection_RightToLeft = @"RIGHT_TO_LEFT";
NSString * const kGTLRSheets_CellFormat_TextDirection_TextDirectionUnspecified = @"TEXT_DIRECTION_UNSPECIFIED";

// GTLRSheets_CellFormat.verticalAlignment
NSString * const kGTLRSheets_CellFormat_VerticalAlignment_Bottom = @"BOTTOM";
NSString * const kGTLRSheets_CellFormat_VerticalAlignment_Middle = @"MIDDLE";
NSString * const kGTLRSheets_CellFormat_VerticalAlignment_Top  = @"TOP";
NSString * const kGTLRSheets_CellFormat_VerticalAlignment_VerticalAlignUnspecified = @"VERTICAL_ALIGN_UNSPECIFIED";

// GTLRSheets_CellFormat.wrapStrategy
NSString * const kGTLRSheets_CellFormat_WrapStrategy_Clip      = @"CLIP";
NSString * const kGTLRSheets_CellFormat_WrapStrategy_LegacyWrap = @"LEGACY_WRAP";
NSString * const kGTLRSheets_CellFormat_WrapStrategy_OverflowCell = @"OVERFLOW_CELL";
NSString * const kGTLRSheets_CellFormat_WrapStrategy_Wrap      = @"WRAP";
NSString * const kGTLRSheets_CellFormat_WrapStrategy_WrapStrategyUnspecified = @"WRAP_STRATEGY_UNSPECIFIED";

// GTLRSheets_ChartAxisViewWindowOptions.viewWindowMode
NSString * const kGTLRSheets_ChartAxisViewWindowOptions_ViewWindowMode_DefaultViewWindowMode = @"DEFAULT_VIEW_WINDOW_MODE";
NSString * const kGTLRSheets_ChartAxisViewWindowOptions_ViewWindowMode_Explicit = @"EXPLICIT";
NSString * const kGTLRSheets_ChartAxisViewWindowOptions_ViewWindowMode_Pretty = @"PRETTY";
NSString * const kGTLRSheets_ChartAxisViewWindowOptions_ViewWindowMode_ViewWindowModeUnsupported = @"VIEW_WINDOW_MODE_UNSUPPORTED";

// GTLRSheets_ChartData.aggregateType
NSString * const kGTLRSheets_ChartData_AggregateType_Average   = @"AVERAGE";
NSString * const kGTLRSheets_ChartData_AggregateType_ChartAggregateTypeUnspecified = @"CHART_AGGREGATE_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_ChartData_AggregateType_Count     = @"COUNT";
NSString * const kGTLRSheets_ChartData_AggregateType_Max       = @"MAX";
NSString * const kGTLRSheets_ChartData_AggregateType_Median    = @"MEDIAN";
NSString * const kGTLRSheets_ChartData_AggregateType_Min       = @"MIN";
NSString * const kGTLRSheets_ChartData_AggregateType_Sum       = @"SUM";

// GTLRSheets_ChartDateTimeRule.type
NSString * const kGTLRSheets_ChartDateTimeRule_Type_ChartDateTimeRuleTypeUnspecified = @"CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_DayMonth   = @"DAY_MONTH";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_DayOfMonth = @"DAY_OF_MONTH";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_DayOfWeek  = @"DAY_OF_WEEK";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_DayOfYear  = @"DAY_OF_YEAR";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_Hour       = @"HOUR";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_HourMinute = @"HOUR_MINUTE";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_HourMinuteAmpm = @"HOUR_MINUTE_AMPM";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_Minute     = @"MINUTE";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_Month      = @"MONTH";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_Quarter    = @"QUARTER";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_Second     = @"SECOND";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_Year       = @"YEAR";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_YearMonth  = @"YEAR_MONTH";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_YearMonthDay = @"YEAR_MONTH_DAY";
NSString * const kGTLRSheets_ChartDateTimeRule_Type_YearQuarter = @"YEAR_QUARTER";

// GTLRSheets_ChartSpec.hiddenDimensionStrategy
NSString * const kGTLRSheets_ChartSpec_HiddenDimensionStrategy_ChartHiddenDimensionStrategyUnspecified = @"CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED";
NSString * const kGTLRSheets_ChartSpec_HiddenDimensionStrategy_ShowAll = @"SHOW_ALL";
NSString * const kGTLRSheets_ChartSpec_HiddenDimensionStrategy_SkipHiddenColumns = @"SKIP_HIDDEN_COLUMNS";
NSString * const kGTLRSheets_ChartSpec_HiddenDimensionStrategy_SkipHiddenRows = @"SKIP_HIDDEN_ROWS";
NSString * const kGTLRSheets_ChartSpec_HiddenDimensionStrategy_SkipHiddenRowsAndColumns = @"SKIP_HIDDEN_ROWS_AND_COLUMNS";

// GTLRSheets_ColorStyle.themeColor
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Accent1     = @"ACCENT1";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Accent2     = @"ACCENT2";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Accent3     = @"ACCENT3";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Accent4     = @"ACCENT4";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Accent5     = @"ACCENT5";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Accent6     = @"ACCENT6";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Background  = @"BACKGROUND";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Link        = @"LINK";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_Text        = @"TEXT";
NSString * const kGTLRSheets_ColorStyle_ThemeColor_ThemeColorTypeUnspecified = @"THEME_COLOR_TYPE_UNSPECIFIED";

// GTLRSheets_ConditionValue.relativeDate
NSString * const kGTLRSheets_ConditionValue_RelativeDate_PastMonth = @"PAST_MONTH";
NSString * const kGTLRSheets_ConditionValue_RelativeDate_PastWeek = @"PAST_WEEK";
NSString * const kGTLRSheets_ConditionValue_RelativeDate_PastYear = @"PAST_YEAR";
NSString * const kGTLRSheets_ConditionValue_RelativeDate_RelativeDateUnspecified = @"RELATIVE_DATE_UNSPECIFIED";
NSString * const kGTLRSheets_ConditionValue_RelativeDate_Today = @"TODAY";
NSString * const kGTLRSheets_ConditionValue_RelativeDate_Tomorrow = @"TOMORROW";
NSString * const kGTLRSheets_ConditionValue_RelativeDate_Yesterday = @"YESTERDAY";

// GTLRSheets_CopyPasteRequest.pasteOrientation
NSString * const kGTLRSheets_CopyPasteRequest_PasteOrientation_Normal = @"NORMAL";
NSString * const kGTLRSheets_CopyPasteRequest_PasteOrientation_Transpose = @"TRANSPOSE";

// GTLRSheets_CopyPasteRequest.pasteType
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteConditionalFormatting = @"PASTE_CONDITIONAL_FORMATTING";
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteDataValidation = @"PASTE_DATA_VALIDATION";
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteFormat = @"PASTE_FORMAT";
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteFormula = @"PASTE_FORMULA";
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteNoBorders = @"PASTE_NO_BORDERS";
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteNormal = @"PASTE_NORMAL";
NSString * const kGTLRSheets_CopyPasteRequest_PasteType_PasteValues = @"PASTE_VALUES";

// GTLRSheets_CutPasteRequest.pasteType
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteConditionalFormatting = @"PASTE_CONDITIONAL_FORMATTING";
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteDataValidation = @"PASTE_DATA_VALIDATION";
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteFormat = @"PASTE_FORMAT";
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteFormula = @"PASTE_FORMULA";
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteNoBorders = @"PASTE_NO_BORDERS";
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteNormal = @"PASTE_NORMAL";
NSString * const kGTLRSheets_CutPasteRequest_PasteType_PasteValues = @"PASTE_VALUES";

// GTLRSheets_DataExecutionStatus.errorCode
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_ConcurrentQuery = @"CONCURRENT_QUERY";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_DataExecutionCancelled = @"DATA_EXECUTION_CANCELLED";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_DataExecutionErrorCodeUnspecified = @"DATA_EXECUTION_ERROR_CODE_UNSPECIFIED";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_DataNotFound = @"DATA_NOT_FOUND";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_DuplicateColumnNames = @"DUPLICATE_COLUMN_NAMES";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_Engine = @"ENGINE";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_Interrupted = @"INTERRUPTED";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_MissingColumnAlias = @"MISSING_COLUMN_ALIAS";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_ObjectInErrorState = @"OBJECT_IN_ERROR_STATE";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_ObjectNotFound = @"OBJECT_NOT_FOUND";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_ObjectSpecInvalid = @"OBJECT_SPEC_INVALID";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_Other = @"OTHER";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_ParameterInvalid = @"PARAMETER_INVALID";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_PermissionDenied = @"PERMISSION_DENIED";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_TimedOut = @"TIMED_OUT";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_TooManyCells = @"TOO_MANY_CELLS";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_TooManyCharsPerCell = @"TOO_MANY_CHARS_PER_CELL";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_TooManyColumns = @"TOO_MANY_COLUMNS";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_TooManyRows = @"TOO_MANY_ROWS";
NSString * const kGTLRSheets_DataExecutionStatus_ErrorCode_UnsupportedDataType = @"UNSUPPORTED_DATA_TYPE";

// GTLRSheets_DataExecutionStatus.state
NSString * const kGTLRSheets_DataExecutionStatus_State_Cancelling = @"CANCELLING";
NSString * const kGTLRSheets_DataExecutionStatus_State_DataExecutionStateUnspecified = @"DATA_EXECUTION_STATE_UNSPECIFIED";
NSString * const kGTLRSheets_DataExecutionStatus_State_Failed  = @"FAILED";
NSString * const kGTLRSheets_DataExecutionStatus_State_NotStarted = @"NOT_STARTED";
NSString * const kGTLRSheets_DataExecutionStatus_State_Running = @"RUNNING";
NSString * const kGTLRSheets_DataExecutionStatus_State_Succeeded = @"SUCCEEDED";

// GTLRSheets_DataFilterValueRange.majorDimension
NSString * const kGTLRSheets_DataFilterValueRange_MajorDimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_DataFilterValueRange_MajorDimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_DataFilterValueRange_MajorDimension_Rows = @"ROWS";

// GTLRSheets_DataLabel.placement
NSString * const kGTLRSheets_DataLabel_Placement_Above         = @"ABOVE";
NSString * const kGTLRSheets_DataLabel_Placement_Below         = @"BELOW";
NSString * const kGTLRSheets_DataLabel_Placement_Center        = @"CENTER";
NSString * const kGTLRSheets_DataLabel_Placement_DataLabelPlacementUnspecified = @"DATA_LABEL_PLACEMENT_UNSPECIFIED";
NSString * const kGTLRSheets_DataLabel_Placement_InsideBase    = @"INSIDE_BASE";
NSString * const kGTLRSheets_DataLabel_Placement_InsideEnd     = @"INSIDE_END";
NSString * const kGTLRSheets_DataLabel_Placement_Left          = @"LEFT";
NSString * const kGTLRSheets_DataLabel_Placement_OutsideEnd    = @"OUTSIDE_END";
NSString * const kGTLRSheets_DataLabel_Placement_Right         = @"RIGHT";

// GTLRSheets_DataLabel.type
NSString * const kGTLRSheets_DataLabel_Type_Custom             = @"CUSTOM";
NSString * const kGTLRSheets_DataLabel_Type_Data               = @"DATA";
NSString * const kGTLRSheets_DataLabel_Type_DataLabelTypeUnspecified = @"DATA_LABEL_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_DataLabel_Type_None               = @"NONE";

// GTLRSheets_DataSourceRefreshSchedule.refreshScope
NSString * const kGTLRSheets_DataSourceRefreshSchedule_RefreshScope_AllDataSources = @"ALL_DATA_SOURCES";
NSString * const kGTLRSheets_DataSourceRefreshSchedule_RefreshScope_DataSourceRefreshScopeUnspecified = @"DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED";

// GTLRSheets_DataSourceRefreshWeeklySchedule.daysOfWeek
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_DayOfWeekUnspecified = @"DAY_OF_WEEK_UNSPECIFIED";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Friday = @"FRIDAY";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Monday = @"MONDAY";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Saturday = @"SATURDAY";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Sunday = @"SUNDAY";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Thursday = @"THURSDAY";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Tuesday = @"TUESDAY";
NSString * const kGTLRSheets_DataSourceRefreshWeeklySchedule_DaysOfWeek_Wednesday = @"WEDNESDAY";

// GTLRSheets_DataSourceTable.columnSelectionType
NSString * const kGTLRSheets_DataSourceTable_ColumnSelectionType_DataSourceTableColumnSelectionTypeUnspecified = @"DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_DataSourceTable_ColumnSelectionType_Selected = @"SELECTED";
NSString * const kGTLRSheets_DataSourceTable_ColumnSelectionType_SyncAll = @"SYNC_ALL";

// GTLRSheets_DateTimeRule.type
NSString * const kGTLRSheets_DateTimeRule_Type_DateTimeRuleTypeUnspecified = @"DATE_TIME_RULE_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_DateTimeRule_Type_DayMonth        = @"DAY_MONTH";
NSString * const kGTLRSheets_DateTimeRule_Type_DayOfMonth      = @"DAY_OF_MONTH";
NSString * const kGTLRSheets_DateTimeRule_Type_DayOfWeek       = @"DAY_OF_WEEK";
NSString * const kGTLRSheets_DateTimeRule_Type_DayOfYear       = @"DAY_OF_YEAR";
NSString * const kGTLRSheets_DateTimeRule_Type_Hour            = @"HOUR";
NSString * const kGTLRSheets_DateTimeRule_Type_HourMinute      = @"HOUR_MINUTE";
NSString * const kGTLRSheets_DateTimeRule_Type_HourMinuteAmpm  = @"HOUR_MINUTE_AMPM";
NSString * const kGTLRSheets_DateTimeRule_Type_Minute          = @"MINUTE";
NSString * const kGTLRSheets_DateTimeRule_Type_Month           = @"MONTH";
NSString * const kGTLRSheets_DateTimeRule_Type_Quarter         = @"QUARTER";
NSString * const kGTLRSheets_DateTimeRule_Type_Second          = @"SECOND";
NSString * const kGTLRSheets_DateTimeRule_Type_Year            = @"YEAR";
NSString * const kGTLRSheets_DateTimeRule_Type_YearMonth       = @"YEAR_MONTH";
NSString * const kGTLRSheets_DateTimeRule_Type_YearMonthDay    = @"YEAR_MONTH_DAY";
NSString * const kGTLRSheets_DateTimeRule_Type_YearQuarter     = @"YEAR_QUARTER";

// GTLRSheets_DeleteRangeRequest.shiftDimension
NSString * const kGTLRSheets_DeleteRangeRequest_ShiftDimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_DeleteRangeRequest_ShiftDimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_DeleteRangeRequest_ShiftDimension_Rows = @"ROWS";

// GTLRSheets_DeveloperMetadata.visibility
NSString * const kGTLRSheets_DeveloperMetadata_Visibility_DeveloperMetadataVisibilityUnspecified = @"DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED";
NSString * const kGTLRSheets_DeveloperMetadata_Visibility_Document = @"DOCUMENT";
NSString * const kGTLRSheets_DeveloperMetadata_Visibility_Project = @"PROJECT";

// GTLRSheets_DeveloperMetadataLocation.locationType
NSString * const kGTLRSheets_DeveloperMetadataLocation_LocationType_Column = @"COLUMN";
NSString * const kGTLRSheets_DeveloperMetadataLocation_LocationType_DeveloperMetadataLocationTypeUnspecified = @"DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_DeveloperMetadataLocation_LocationType_Row = @"ROW";
NSString * const kGTLRSheets_DeveloperMetadataLocation_LocationType_Sheet = @"SHEET";
NSString * const kGTLRSheets_DeveloperMetadataLocation_LocationType_Spreadsheet = @"SPREADSHEET";

// GTLRSheets_DeveloperMetadataLookup.locationMatchingStrategy
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationMatchingStrategy_DeveloperMetadataLocationMatchingStrategyUnspecified = @"DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED";
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationMatchingStrategy_ExactLocation = @"EXACT_LOCATION";
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationMatchingStrategy_IntersectingLocation = @"INTERSECTING_LOCATION";

// GTLRSheets_DeveloperMetadataLookup.locationType
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationType_Column = @"COLUMN";
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationType_DeveloperMetadataLocationTypeUnspecified = @"DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationType_Row = @"ROW";
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationType_Sheet = @"SHEET";
NSString * const kGTLRSheets_DeveloperMetadataLookup_LocationType_Spreadsheet = @"SPREADSHEET";

// GTLRSheets_DeveloperMetadataLookup.visibility
NSString * const kGTLRSheets_DeveloperMetadataLookup_Visibility_DeveloperMetadataVisibilityUnspecified = @"DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED";
NSString * const kGTLRSheets_DeveloperMetadataLookup_Visibility_Document = @"DOCUMENT";
NSString * const kGTLRSheets_DeveloperMetadataLookup_Visibility_Project = @"PROJECT";

// GTLRSheets_DimensionRange.dimension
NSString * const kGTLRSheets_DimensionRange_Dimension_Columns  = @"COLUMNS";
NSString * const kGTLRSheets_DimensionRange_Dimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_DimensionRange_Dimension_Rows     = @"ROWS";

// GTLRSheets_ErrorValue.type
NSString * const kGTLRSheets_ErrorValue_Type_DivideByZero      = @"DIVIDE_BY_ZERO";
NSString * const kGTLRSheets_ErrorValue_Type_Error             = @"ERROR";
NSString * const kGTLRSheets_ErrorValue_Type_ErrorTypeUnspecified = @"ERROR_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_ErrorValue_Type_Loading           = @"LOADING";
NSString * const kGTLRSheets_ErrorValue_Type_NA                = @"N_A";
NSString * const kGTLRSheets_ErrorValue_Type_Name              = @"NAME";
NSString * const kGTLRSheets_ErrorValue_Type_NullValue         = @"NULL_VALUE";
NSString * const kGTLRSheets_ErrorValue_Type_Num               = @"NUM";
NSString * const kGTLRSheets_ErrorValue_Type_Ref               = @"REF";
NSString * const kGTLRSheets_ErrorValue_Type_Value             = @"VALUE";

// GTLRSheets_HistogramChartSpec.legendPosition
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_BottomLegend = @"BOTTOM_LEGEND";
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_HistogramChartLegendPositionUnspecified = @"HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED";
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_InsideLegend = @"INSIDE_LEGEND";
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_LeftLegend = @"LEFT_LEGEND";
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_NoLegend = @"NO_LEGEND";
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_RightLegend = @"RIGHT_LEGEND";
NSString * const kGTLRSheets_HistogramChartSpec_LegendPosition_TopLegend = @"TOP_LEGEND";

// GTLRSheets_InsertRangeRequest.shiftDimension
NSString * const kGTLRSheets_InsertRangeRequest_ShiftDimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_InsertRangeRequest_ShiftDimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_InsertRangeRequest_ShiftDimension_Rows = @"ROWS";

// GTLRSheets_InterpolationPoint.type
NSString * const kGTLRSheets_InterpolationPoint_Type_InterpolationPointTypeUnspecified = @"INTERPOLATION_POINT_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_InterpolationPoint_Type_Max       = @"MAX";
NSString * const kGTLRSheets_InterpolationPoint_Type_Min       = @"MIN";
NSString * const kGTLRSheets_InterpolationPoint_Type_Number    = @"NUMBER";
NSString * const kGTLRSheets_InterpolationPoint_Type_Percent   = @"PERCENT";
NSString * const kGTLRSheets_InterpolationPoint_Type_Percentile = @"PERCENTILE";

// GTLRSheets_LineStyle.type
NSString * const kGTLRSheets_LineStyle_Type_Custom             = @"CUSTOM";
NSString * const kGTLRSheets_LineStyle_Type_Dotted             = @"DOTTED";
NSString * const kGTLRSheets_LineStyle_Type_Invisible          = @"INVISIBLE";
NSString * const kGTLRSheets_LineStyle_Type_LineDashTypeUnspecified = @"LINE_DASH_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_LineStyle_Type_LongDashed         = @"LONG_DASHED";
NSString * const kGTLRSheets_LineStyle_Type_LongDashedDotted   = @"LONG_DASHED_DOTTED";
NSString * const kGTLRSheets_LineStyle_Type_MediumDashed       = @"MEDIUM_DASHED";
NSString * const kGTLRSheets_LineStyle_Type_MediumDashedDotted = @"MEDIUM_DASHED_DOTTED";
NSString * const kGTLRSheets_LineStyle_Type_Solid              = @"SOLID";

// GTLRSheets_MergeCellsRequest.mergeType
NSString * const kGTLRSheets_MergeCellsRequest_MergeType_MergeAll = @"MERGE_ALL";
NSString * const kGTLRSheets_MergeCellsRequest_MergeType_MergeColumns = @"MERGE_COLUMNS";
NSString * const kGTLRSheets_MergeCellsRequest_MergeType_MergeRows = @"MERGE_ROWS";

// GTLRSheets_NumberFormat.type
NSString * const kGTLRSheets_NumberFormat_Type_Currency        = @"CURRENCY";
NSString * const kGTLRSheets_NumberFormat_Type_Date            = @"DATE";
NSString * const kGTLRSheets_NumberFormat_Type_DateTime        = @"DATE_TIME";
NSString * const kGTLRSheets_NumberFormat_Type_Number          = @"NUMBER";
NSString * const kGTLRSheets_NumberFormat_Type_NumberFormatTypeUnspecified = @"NUMBER_FORMAT_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_NumberFormat_Type_Percent         = @"PERCENT";
NSString * const kGTLRSheets_NumberFormat_Type_Scientific      = @"SCIENTIFIC";
NSString * const kGTLRSheets_NumberFormat_Type_Text            = @"TEXT";
NSString * const kGTLRSheets_NumberFormat_Type_Time            = @"TIME";

// GTLRSheets_OrgChartSpec.nodeSize
NSString * const kGTLRSheets_OrgChartSpec_NodeSize_Large       = @"LARGE";
NSString * const kGTLRSheets_OrgChartSpec_NodeSize_Medium      = @"MEDIUM";
NSString * const kGTLRSheets_OrgChartSpec_NodeSize_OrgChartLabelSizeUnspecified = @"ORG_CHART_LABEL_SIZE_UNSPECIFIED";
NSString * const kGTLRSheets_OrgChartSpec_NodeSize_Small       = @"SMALL";

// GTLRSheets_PasteDataRequest.type
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteConditionalFormatting = @"PASTE_CONDITIONAL_FORMATTING";
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteDataValidation = @"PASTE_DATA_VALIDATION";
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteFormat = @"PASTE_FORMAT";
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteFormula = @"PASTE_FORMULA";
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteNoBorders = @"PASTE_NO_BORDERS";
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteNormal = @"PASTE_NORMAL";
NSString * const kGTLRSheets_PasteDataRequest_Type_PasteValues = @"PASTE_VALUES";

// GTLRSheets_PieChartSpec.legendPosition
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_BottomLegend = @"BOTTOM_LEGEND";
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_LabeledLegend = @"LABELED_LEGEND";
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_LeftLegend = @"LEFT_LEGEND";
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_NoLegend = @"NO_LEGEND";
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_PieChartLegendPositionUnspecified = @"PIE_CHART_LEGEND_POSITION_UNSPECIFIED";
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_RightLegend = @"RIGHT_LEGEND";
NSString * const kGTLRSheets_PieChartSpec_LegendPosition_TopLegend = @"TOP_LEGEND";

// GTLRSheets_PivotGroup.sortOrder
NSString * const kGTLRSheets_PivotGroup_SortOrder_Ascending    = @"ASCENDING";
NSString * const kGTLRSheets_PivotGroup_SortOrder_Descending   = @"DESCENDING";
NSString * const kGTLRSheets_PivotGroup_SortOrder_SortOrderUnspecified = @"SORT_ORDER_UNSPECIFIED";

// GTLRSheets_PivotTable.valueLayout
NSString * const kGTLRSheets_PivotTable_ValueLayout_Horizontal = @"HORIZONTAL";
NSString * const kGTLRSheets_PivotTable_ValueLayout_Vertical   = @"VERTICAL";

// GTLRSheets_PivotValue.calculatedDisplayType
NSString * const kGTLRSheets_PivotValue_CalculatedDisplayType_PercentOfColumnTotal = @"PERCENT_OF_COLUMN_TOTAL";
NSString * const kGTLRSheets_PivotValue_CalculatedDisplayType_PercentOfGrandTotal = @"PERCENT_OF_GRAND_TOTAL";
NSString * const kGTLRSheets_PivotValue_CalculatedDisplayType_PercentOfRowTotal = @"PERCENT_OF_ROW_TOTAL";
NSString * const kGTLRSheets_PivotValue_CalculatedDisplayType_PivotValueCalculatedDisplayTypeUnspecified = @"PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED";

// GTLRSheets_PivotValue.summarizeFunction
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Average = @"AVERAGE";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Count = @"COUNT";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Counta = @"COUNTA";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Countunique = @"COUNTUNIQUE";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Custom = @"CUSTOM";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Max  = @"MAX";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Median = @"MEDIAN";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Min  = @"MIN";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_None = @"NONE";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_PivotStandardValueFunctionUnspecified = @"PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Product = @"PRODUCT";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Stdev = @"STDEV";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Stdevp = @"STDEVP";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Sum  = @"SUM";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Var  = @"VAR";
NSString * const kGTLRSheets_PivotValue_SummarizeFunction_Varp = @"VARP";

// GTLRSheets_PointStyle.shape
NSString * const kGTLRSheets_PointStyle_Shape_Circle           = @"CIRCLE";
NSString * const kGTLRSheets_PointStyle_Shape_Diamond          = @"DIAMOND";
NSString * const kGTLRSheets_PointStyle_Shape_Hexagon          = @"HEXAGON";
NSString * const kGTLRSheets_PointStyle_Shape_Pentagon         = @"PENTAGON";
NSString * const kGTLRSheets_PointStyle_Shape_PointShapeUnspecified = @"POINT_SHAPE_UNSPECIFIED";
NSString * const kGTLRSheets_PointStyle_Shape_Square           = @"SQUARE";
NSString * const kGTLRSheets_PointStyle_Shape_Star             = @"STAR";
NSString * const kGTLRSheets_PointStyle_Shape_Triangle         = @"TRIANGLE";
NSString * const kGTLRSheets_PointStyle_Shape_XMark            = @"X_MARK";

// GTLRSheets_RefreshCancellationStatus.errorCode
NSString * const kGTLRSheets_RefreshCancellationStatus_ErrorCode_CancelOtherError = @"CANCEL_OTHER_ERROR";
NSString * const kGTLRSheets_RefreshCancellationStatus_ErrorCode_CancelPermissionDenied = @"CANCEL_PERMISSION_DENIED";
NSString * const kGTLRSheets_RefreshCancellationStatus_ErrorCode_ConcurrentCancellation = @"CONCURRENT_CANCELLATION";
NSString * const kGTLRSheets_RefreshCancellationStatus_ErrorCode_ExecutionNotFound = @"EXECUTION_NOT_FOUND";
NSString * const kGTLRSheets_RefreshCancellationStatus_ErrorCode_QueryExecutionCompleted = @"QUERY_EXECUTION_COMPLETED";
NSString * const kGTLRSheets_RefreshCancellationStatus_ErrorCode_RefreshCancellationErrorCodeUnspecified = @"REFRESH_CANCELLATION_ERROR_CODE_UNSPECIFIED";

// GTLRSheets_RefreshCancellationStatus.state
NSString * const kGTLRSheets_RefreshCancellationStatus_State_CancelFailed = @"CANCEL_FAILED";
NSString * const kGTLRSheets_RefreshCancellationStatus_State_CancelSucceeded = @"CANCEL_SUCCEEDED";
NSString * const kGTLRSheets_RefreshCancellationStatus_State_RefreshCancellationStateUnspecified = @"REFRESH_CANCELLATION_STATE_UNSPECIFIED";

// GTLRSheets_ScorecardChartSpec.aggregateType
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_Average = @"AVERAGE";
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_ChartAggregateTypeUnspecified = @"CHART_AGGREGATE_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_Count = @"COUNT";
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_Max = @"MAX";
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_Median = @"MEDIAN";
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_Min = @"MIN";
NSString * const kGTLRSheets_ScorecardChartSpec_AggregateType_Sum = @"SUM";

// GTLRSheets_ScorecardChartSpec.numberFormatSource
NSString * const kGTLRSheets_ScorecardChartSpec_NumberFormatSource_ChartNumberFormatSourceUndefined = @"CHART_NUMBER_FORMAT_SOURCE_UNDEFINED";
NSString * const kGTLRSheets_ScorecardChartSpec_NumberFormatSource_Custom = @"CUSTOM";
NSString * const kGTLRSheets_ScorecardChartSpec_NumberFormatSource_FromData = @"FROM_DATA";

// GTLRSheets_SheetProperties.sheetType
NSString * const kGTLRSheets_SheetProperties_SheetType_DataSource = @"DATA_SOURCE";
NSString * const kGTLRSheets_SheetProperties_SheetType_Grid    = @"GRID";
NSString * const kGTLRSheets_SheetProperties_SheetType_Object  = @"OBJECT";
NSString * const kGTLRSheets_SheetProperties_SheetType_SheetTypeUnspecified = @"SHEET_TYPE_UNSPECIFIED";

// GTLRSheets_SlicerSpec.horizontalAlignment
NSString * const kGTLRSheets_SlicerSpec_HorizontalAlignment_Center = @"CENTER";
NSString * const kGTLRSheets_SlicerSpec_HorizontalAlignment_HorizontalAlignUnspecified = @"HORIZONTAL_ALIGN_UNSPECIFIED";
NSString * const kGTLRSheets_SlicerSpec_HorizontalAlignment_Left = @"LEFT";
NSString * const kGTLRSheets_SlicerSpec_HorizontalAlignment_Right = @"RIGHT";

// GTLRSheets_SortSpec.sortOrder
NSString * const kGTLRSheets_SortSpec_SortOrder_Ascending      = @"ASCENDING";
NSString * const kGTLRSheets_SortSpec_SortOrder_Descending     = @"DESCENDING";
NSString * const kGTLRSheets_SortSpec_SortOrder_SortOrderUnspecified = @"SORT_ORDER_UNSPECIFIED";

// GTLRSheets_SourceAndDestination.dimension
NSString * const kGTLRSheets_SourceAndDestination_Dimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_SourceAndDestination_Dimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_SourceAndDestination_Dimension_Rows = @"ROWS";

// GTLRSheets_SpreadsheetProperties.autoRecalc
NSString * const kGTLRSheets_SpreadsheetProperties_AutoRecalc_Hour = @"HOUR";
NSString * const kGTLRSheets_SpreadsheetProperties_AutoRecalc_Minute = @"MINUTE";
NSString * const kGTLRSheets_SpreadsheetProperties_AutoRecalc_OnChange = @"ON_CHANGE";
NSString * const kGTLRSheets_SpreadsheetProperties_AutoRecalc_RecalculationIntervalUnspecified = @"RECALCULATION_INTERVAL_UNSPECIFIED";

// GTLRSheets_TextPosition.horizontalAlignment
NSString * const kGTLRSheets_TextPosition_HorizontalAlignment_Center = @"CENTER";
NSString * const kGTLRSheets_TextPosition_HorizontalAlignment_HorizontalAlignUnspecified = @"HORIZONTAL_ALIGN_UNSPECIFIED";
NSString * const kGTLRSheets_TextPosition_HorizontalAlignment_Left = @"LEFT";
NSString * const kGTLRSheets_TextPosition_HorizontalAlignment_Right = @"RIGHT";

// GTLRSheets_TextToColumnsRequest.delimiterType
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_Autodetect = @"AUTODETECT";
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_Comma = @"COMMA";
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_Custom = @"CUSTOM";
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_DelimiterTypeUnspecified = @"DELIMITER_TYPE_UNSPECIFIED";
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_Period = @"PERIOD";
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_Semicolon = @"SEMICOLON";
NSString * const kGTLRSheets_TextToColumnsRequest_DelimiterType_Space = @"SPACE";

// GTLRSheets_ThemeColorPair.colorType
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Accent1  = @"ACCENT1";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Accent2  = @"ACCENT2";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Accent3  = @"ACCENT3";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Accent4  = @"ACCENT4";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Accent5  = @"ACCENT5";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Accent6  = @"ACCENT6";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Background = @"BACKGROUND";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Link     = @"LINK";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_Text     = @"TEXT";
NSString * const kGTLRSheets_ThemeColorPair_ColorType_ThemeColorTypeUnspecified = @"THEME_COLOR_TYPE_UNSPECIFIED";

// GTLRSheets_ValueRange.majorDimension
NSString * const kGTLRSheets_ValueRange_MajorDimension_Columns = @"COLUMNS";
NSString * const kGTLRSheets_ValueRange_MajorDimension_DimensionUnspecified = @"DIMENSION_UNSPECIFIED";
NSString * const kGTLRSheets_ValueRange_MajorDimension_Rows    = @"ROWS";

// GTLRSheets_WaterfallChartSpec.stackedType
NSString * const kGTLRSheets_WaterfallChartSpec_StackedType_Sequential = @"SEQUENTIAL";
NSString * const kGTLRSheets_WaterfallChartSpec_StackedType_Stacked = @"STACKED";
NSString * const kGTLRSheets_WaterfallChartSpec_StackedType_WaterfallStackedTypeUnspecified = @"WATERFALL_STACKED_TYPE_UNSPECIFIED";

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddBandingRequest
//

@implementation GTLRSheets_AddBandingRequest
@dynamic bandedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddBandingResponse
//

@implementation GTLRSheets_AddBandingResponse
@dynamic bandedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddChartRequest
//

@implementation GTLRSheets_AddChartRequest
@dynamic chart;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddChartResponse
//

@implementation GTLRSheets_AddChartResponse
@dynamic chart;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddConditionalFormatRuleRequest
//

@implementation GTLRSheets_AddConditionalFormatRuleRequest
@dynamic index, rule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddDataSourceRequest
//

@implementation GTLRSheets_AddDataSourceRequest
@dynamic dataSource;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddDataSourceResponse
//

@implementation GTLRSheets_AddDataSourceResponse
@dynamic dataExecutionStatus, dataSource;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddDimensionGroupRequest
//

@implementation GTLRSheets_AddDimensionGroupRequest
@dynamic range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddDimensionGroupResponse
//

@implementation GTLRSheets_AddDimensionGroupResponse
@dynamic dimensionGroups;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dimensionGroups" : [GTLRSheets_DimensionGroup class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddFilterViewRequest
//

@implementation GTLRSheets_AddFilterViewRequest
@dynamic filter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddFilterViewResponse
//

@implementation GTLRSheets_AddFilterViewResponse
@dynamic filter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddNamedRangeRequest
//

@implementation GTLRSheets_AddNamedRangeRequest
@dynamic namedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddNamedRangeResponse
//

@implementation GTLRSheets_AddNamedRangeResponse
@dynamic namedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddProtectedRangeRequest
//

@implementation GTLRSheets_AddProtectedRangeRequest
@dynamic protectedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddProtectedRangeResponse
//

@implementation GTLRSheets_AddProtectedRangeResponse
@dynamic protectedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddSheetRequest
//

@implementation GTLRSheets_AddSheetRequest
@dynamic properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddSheetResponse
//

@implementation GTLRSheets_AddSheetResponse
@dynamic properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddSlicerRequest
//

@implementation GTLRSheets_AddSlicerRequest
@dynamic slicer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AddSlicerResponse
//

@implementation GTLRSheets_AddSlicerResponse
@dynamic slicer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AppendCellsRequest
//

@implementation GTLRSheets_AppendCellsRequest
@dynamic fields, rows, sheetId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRSheets_RowData class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AppendDimensionRequest
//

@implementation GTLRSheets_AppendDimensionRequest
@dynamic dimension, length, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AppendValuesResponse
//

@implementation GTLRSheets_AppendValuesResponse
@dynamic spreadsheetId, tableRange, updates;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AutoFillRequest
//

@implementation GTLRSheets_AutoFillRequest
@dynamic range, sourceAndDestination, useAlternateSeries;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_AutoResizeDimensionsRequest
//

@implementation GTLRSheets_AutoResizeDimensionsRequest
@dynamic dataSourceSheetDimensions, dimensions;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BandedRange
//

@implementation GTLRSheets_BandedRange
@dynamic bandedRangeId, columnProperties, range, rowProperties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BandingProperties
//

@implementation GTLRSheets_BandingProperties
@dynamic firstBandColor, firstBandColorStyle, footerColor, footerColorStyle,
         headerColor, headerColorStyle, secondBandColor, secondBandColorStyle;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BaselineValueFormat
//

@implementation GTLRSheets_BaselineValueFormat
@dynamic comparisonType, descriptionProperty, negativeColor, negativeColorStyle,
         position, positiveColor, positiveColorStyle, textFormat;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicChartAxis
//

@implementation GTLRSheets_BasicChartAxis
@dynamic format, position, title, titleTextPosition, viewWindowOptions;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicChartDomain
//

@implementation GTLRSheets_BasicChartDomain
@dynamic domain, reversed;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicChartSeries
//

@implementation GTLRSheets_BasicChartSeries
@dynamic color, colorStyle, dataLabel, lineStyle, pointStyle, series,
         styleOverrides, targetAxis, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"styleOverrides" : [GTLRSheets_BasicSeriesDataPointStyleOverride class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicChartSpec
//

@implementation GTLRSheets_BasicChartSpec
@dynamic axis, chartType, compareMode, domains, headerCount, interpolateNulls,
         legendPosition, lineSmoothing, series, stackedType, threeDimensional,
         totalDataLabel;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"axis" : [GTLRSheets_BasicChartAxis class],
    @"domains" : [GTLRSheets_BasicChartDomain class],
    @"series" : [GTLRSheets_BasicChartSeries class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicFilter
//

@implementation GTLRSheets_BasicFilter
@dynamic criteria, filterSpecs, range, sortSpecs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"filterSpecs" : [GTLRSheets_FilterSpec class],
    @"sortSpecs" : [GTLRSheets_SortSpec class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicFilter_Criteria
//

@implementation GTLRSheets_BasicFilter_Criteria

+ (Class)classForAdditionalProperties {
  return [GTLRSheets_FilterCriteria class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BasicSeriesDataPointStyleOverride
//

@implementation GTLRSheets_BasicSeriesDataPointStyleOverride
@dynamic color, colorStyle, index, pointStyle;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchClearValuesByDataFilterRequest
//

@implementation GTLRSheets_BatchClearValuesByDataFilterRequest
@dynamic dataFilters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchClearValuesByDataFilterResponse
//

@implementation GTLRSheets_BatchClearValuesByDataFilterResponse
@dynamic clearedRanges, spreadsheetId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clearedRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchClearValuesRequest
//

@implementation GTLRSheets_BatchClearValuesRequest
@dynamic ranges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ranges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchClearValuesResponse
//

@implementation GTLRSheets_BatchClearValuesResponse
@dynamic clearedRanges, spreadsheetId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clearedRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchGetValuesByDataFilterRequest
//

@implementation GTLRSheets_BatchGetValuesByDataFilterRequest
@dynamic dataFilters, dateTimeRenderOption, majorDimension, valueRenderOption;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchGetValuesByDataFilterResponse
//

@implementation GTLRSheets_BatchGetValuesByDataFilterResponse
@dynamic spreadsheetId, valueRanges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"valueRanges" : [GTLRSheets_MatchedValueRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchGetValuesResponse
//

@implementation GTLRSheets_BatchGetValuesResponse
@dynamic spreadsheetId, valueRanges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"valueRanges" : [GTLRSheets_ValueRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchUpdateSpreadsheetRequest
//

@implementation GTLRSheets_BatchUpdateSpreadsheetRequest
@dynamic includeSpreadsheetInResponse, requests, responseIncludeGridData,
         responseRanges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requests" : [GTLRSheets_Request class],
    @"responseRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchUpdateSpreadsheetResponse
//

@implementation GTLRSheets_BatchUpdateSpreadsheetResponse
@dynamic replies, spreadsheetId, updatedSpreadsheet;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"replies" : [GTLRSheets_Response class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchUpdateValuesByDataFilterRequest
//

@implementation GTLRSheets_BatchUpdateValuesByDataFilterRequest
@dynamic data, includeValuesInResponse, responseDateTimeRenderOption,
         responseValueRenderOption, valueInputOption;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"data" : [GTLRSheets_DataFilterValueRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchUpdateValuesByDataFilterResponse
//

@implementation GTLRSheets_BatchUpdateValuesByDataFilterResponse
@dynamic responses, spreadsheetId, totalUpdatedCells, totalUpdatedColumns,
         totalUpdatedRows, totalUpdatedSheets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"responses" : [GTLRSheets_UpdateValuesByDataFilterResponse class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchUpdateValuesRequest
//

@implementation GTLRSheets_BatchUpdateValuesRequest
@dynamic data, includeValuesInResponse, responseDateTimeRenderOption,
         responseValueRenderOption, valueInputOption;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"data" : [GTLRSheets_ValueRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BatchUpdateValuesResponse
//

@implementation GTLRSheets_BatchUpdateValuesResponse
@dynamic responses, spreadsheetId, totalUpdatedCells, totalUpdatedColumns,
         totalUpdatedRows, totalUpdatedSheets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"responses" : [GTLRSheets_UpdateValuesResponse class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BigQueryDataSourceSpec
//

@implementation GTLRSheets_BigQueryDataSourceSpec
@dynamic projectId, querySpec, tableSpec;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BigQueryQuerySpec
//

@implementation GTLRSheets_BigQueryQuerySpec
@dynamic rawQuery;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BigQueryTableSpec
//

@implementation GTLRSheets_BigQueryTableSpec
@dynamic datasetId, tableId, tableProjectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BooleanCondition
//

@implementation GTLRSheets_BooleanCondition
@dynamic type, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [GTLRSheets_ConditionValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BooleanRule
//

@implementation GTLRSheets_BooleanRule
@dynamic condition, format;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Border
//

@implementation GTLRSheets_Border
@dynamic color, colorStyle, style, width;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Borders
//

@implementation GTLRSheets_Borders
@dynamic bottom, left, right, top;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_BubbleChartSpec
//

@implementation GTLRSheets_BubbleChartSpec
@dynamic bubbleBorderColor, bubbleBorderColorStyle, bubbleLabels,
         bubbleMaxRadiusSize, bubbleMinRadiusSize, bubbleOpacity, bubbleSizes,
         bubbleTextStyle, domain, groupIds, legendPosition, series;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CancelDataSourceRefreshRequest
//

@implementation GTLRSheets_CancelDataSourceRefreshRequest
@dynamic dataSourceId, isAll, references;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CancelDataSourceRefreshResponse
//

@implementation GTLRSheets_CancelDataSourceRefreshResponse
@dynamic statuses;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statuses" : [GTLRSheets_CancelDataSourceRefreshStatus class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CancelDataSourceRefreshStatus
//

@implementation GTLRSheets_CancelDataSourceRefreshStatus
@dynamic reference, refreshCancellationStatus;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CandlestickChartSpec
//

@implementation GTLRSheets_CandlestickChartSpec
@dynamic data, domain;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"data" : [GTLRSheets_CandlestickData class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CandlestickData
//

@implementation GTLRSheets_CandlestickData
@dynamic closeSeries, highSeries, lowSeries, openSeries;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CandlestickDomain
//

@implementation GTLRSheets_CandlestickDomain
@dynamic data, reversed;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CandlestickSeries
//

@implementation GTLRSheets_CandlestickSeries
@dynamic data;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CellData
//

@implementation GTLRSheets_CellData
@dynamic dataSourceFormula, dataSourceTable, dataValidation, effectiveFormat,
         effectiveValue, formattedValue, hyperlink, note, pivotTable,
         textFormatRuns, userEnteredFormat, userEnteredValue;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"textFormatRuns" : [GTLRSheets_TextFormatRun class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CellFormat
//

@implementation GTLRSheets_CellFormat
@dynamic backgroundColor, backgroundColorStyle, borders, horizontalAlignment,
         hyperlinkDisplayType, numberFormat, padding, textDirection, textFormat,
         textRotation, verticalAlignment, wrapStrategy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartAxisViewWindowOptions
//

@implementation GTLRSheets_ChartAxisViewWindowOptions
@dynamic viewWindowMax, viewWindowMin, viewWindowMode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartCustomNumberFormatOptions
//

@implementation GTLRSheets_ChartCustomNumberFormatOptions
@dynamic prefix, suffix;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartData
//

@implementation GTLRSheets_ChartData
@dynamic aggregateType, columnReference, groupRule, sourceRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartDateTimeRule
//

@implementation GTLRSheets_ChartDateTimeRule
@dynamic type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartGroupRule
//

@implementation GTLRSheets_ChartGroupRule
@dynamic dateTimeRule, histogramRule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartHistogramRule
//

@implementation GTLRSheets_ChartHistogramRule
@dynamic intervalSize, maxValue, minValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartSourceRange
//

@implementation GTLRSheets_ChartSourceRange
@dynamic sources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRSheets_GridRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ChartSpec
//

@implementation GTLRSheets_ChartSpec
@dynamic altText, backgroundColor, backgroundColorStyle, basicChart,
         bubbleChart, candlestickChart, dataSourceChartProperties, filterSpecs,
         fontName, hiddenDimensionStrategy, histogramChart, maximized, orgChart,
         pieChart, scorecardChart, sortSpecs, subtitle, subtitleTextFormat,
         subtitleTextPosition, title, titleTextFormat, titleTextPosition,
         treemapChart, waterfallChart;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"filterSpecs" : [GTLRSheets_FilterSpec class],
    @"sortSpecs" : [GTLRSheets_SortSpec class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ClearBasicFilterRequest
//

@implementation GTLRSheets_ClearBasicFilterRequest
@dynamic sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ClearValuesRequest
//

@implementation GTLRSheets_ClearValuesRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ClearValuesResponse
//

@implementation GTLRSheets_ClearValuesResponse
@dynamic clearedRange, spreadsheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Color
//

@implementation GTLRSheets_Color
@dynamic alpha, blue, green, red;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ColorStyle
//

@implementation GTLRSheets_ColorStyle
@dynamic rgbColor, themeColor;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ConditionalFormatRule
//

@implementation GTLRSheets_ConditionalFormatRule
@dynamic booleanRule, gradientRule, ranges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ranges" : [GTLRSheets_GridRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ConditionValue
//

@implementation GTLRSheets_ConditionValue
@dynamic relativeDate, userEnteredValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CopyPasteRequest
//

@implementation GTLRSheets_CopyPasteRequest
@dynamic destination, pasteOrientation, pasteType, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CopySheetToAnotherSpreadsheetRequest
//

@implementation GTLRSheets_CopySheetToAnotherSpreadsheetRequest
@dynamic destinationSpreadsheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CreateDeveloperMetadataRequest
//

@implementation GTLRSheets_CreateDeveloperMetadataRequest
@dynamic developerMetadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CreateDeveloperMetadataResponse
//

@implementation GTLRSheets_CreateDeveloperMetadataResponse
@dynamic developerMetadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_CutPasteRequest
//

@implementation GTLRSheets_CutPasteRequest
@dynamic destination, pasteType, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataExecutionStatus
//

@implementation GTLRSheets_DataExecutionStatus
@dynamic errorCode, errorMessage, lastRefreshTime, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataFilter
//

@implementation GTLRSheets_DataFilter
@dynamic a1Range, developerMetadataLookup, gridRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataFilterValueRange
//

@implementation GTLRSheets_DataFilterValueRange
@dynamic dataFilter, majorDimension, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataLabel
//

@implementation GTLRSheets_DataLabel
@dynamic customLabelData, placement, textFormat, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSource
//

@implementation GTLRSheets_DataSource
@dynamic calculatedColumns, dataSourceId, sheetId, spec;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"calculatedColumns" : [GTLRSheets_DataSourceColumn class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceChartProperties
//

@implementation GTLRSheets_DataSourceChartProperties
@dynamic dataExecutionStatus, dataSourceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceColumn
//

@implementation GTLRSheets_DataSourceColumn
@dynamic formula, reference;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceColumnReference
//

@implementation GTLRSheets_DataSourceColumnReference
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceFormula
//

@implementation GTLRSheets_DataSourceFormula
@dynamic dataExecutionStatus, dataSourceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceObjectReference
//

@implementation GTLRSheets_DataSourceObjectReference
@dynamic chartId, dataSourceFormulaCell, dataSourcePivotTableAnchorCell,
         dataSourceTableAnchorCell, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceObjectReferences
//

@implementation GTLRSheets_DataSourceObjectReferences
@dynamic references;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"references" : [GTLRSheets_DataSourceObjectReference class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceParameter
//

@implementation GTLRSheets_DataSourceParameter
@dynamic name, namedRangeId, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceRefreshDailySchedule
//

@implementation GTLRSheets_DataSourceRefreshDailySchedule
@dynamic startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceRefreshMonthlySchedule
//

@implementation GTLRSheets_DataSourceRefreshMonthlySchedule
@dynamic daysOfMonth, startTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"daysOfMonth" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceRefreshSchedule
//

@implementation GTLRSheets_DataSourceRefreshSchedule
@dynamic dailySchedule, enabled, monthlySchedule, nextRun, refreshScope,
         weeklySchedule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceRefreshWeeklySchedule
//

@implementation GTLRSheets_DataSourceRefreshWeeklySchedule
@dynamic daysOfWeek, startTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"daysOfWeek" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceSheetDimensionRange
//

@implementation GTLRSheets_DataSourceSheetDimensionRange
@dynamic columnReferences, sheetId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columnReferences" : [GTLRSheets_DataSourceColumnReference class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceSheetProperties
//

@implementation GTLRSheets_DataSourceSheetProperties
@dynamic columns, dataExecutionStatus, dataSourceId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [GTLRSheets_DataSourceColumn class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceSpec
//

@implementation GTLRSheets_DataSourceSpec
@dynamic bigQuery, looker, parameters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRSheets_DataSourceParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataSourceTable
//

@implementation GTLRSheets_DataSourceTable
@dynamic columns, columnSelectionType, dataExecutionStatus, dataSourceId,
         filterSpecs, rowLimit, sortSpecs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [GTLRSheets_DataSourceColumnReference class],
    @"filterSpecs" : [GTLRSheets_FilterSpec class],
    @"sortSpecs" : [GTLRSheets_SortSpec class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DataValidationRule
//

@implementation GTLRSheets_DataValidationRule
@dynamic condition, inputMessage, showCustomUi, strict;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DateTimeRule
//

@implementation GTLRSheets_DateTimeRule
@dynamic type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteBandingRequest
//

@implementation GTLRSheets_DeleteBandingRequest
@dynamic bandedRangeId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteConditionalFormatRuleRequest
//

@implementation GTLRSheets_DeleteConditionalFormatRuleRequest
@dynamic index, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteConditionalFormatRuleResponse
//

@implementation GTLRSheets_DeleteConditionalFormatRuleResponse
@dynamic rule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDataSourceRequest
//

@implementation GTLRSheets_DeleteDataSourceRequest
@dynamic dataSourceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDeveloperMetadataRequest
//

@implementation GTLRSheets_DeleteDeveloperMetadataRequest
@dynamic dataFilter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDeveloperMetadataResponse
//

@implementation GTLRSheets_DeleteDeveloperMetadataResponse
@dynamic deletedDeveloperMetadata;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"deletedDeveloperMetadata" : [GTLRSheets_DeveloperMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDimensionGroupRequest
//

@implementation GTLRSheets_DeleteDimensionGroupRequest
@dynamic range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDimensionGroupResponse
//

@implementation GTLRSheets_DeleteDimensionGroupResponse
@dynamic dimensionGroups;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dimensionGroups" : [GTLRSheets_DimensionGroup class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDimensionRequest
//

@implementation GTLRSheets_DeleteDimensionRequest
@dynamic range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDuplicatesRequest
//

@implementation GTLRSheets_DeleteDuplicatesRequest
@dynamic comparisonColumns, range;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"comparisonColumns" : [GTLRSheets_DimensionRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteDuplicatesResponse
//

@implementation GTLRSheets_DeleteDuplicatesResponse
@dynamic duplicatesRemovedCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteEmbeddedObjectRequest
//

@implementation GTLRSheets_DeleteEmbeddedObjectRequest
@dynamic objectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteFilterViewRequest
//

@implementation GTLRSheets_DeleteFilterViewRequest
@dynamic filterId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteNamedRangeRequest
//

@implementation GTLRSheets_DeleteNamedRangeRequest
@dynamic namedRangeId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteProtectedRangeRequest
//

@implementation GTLRSheets_DeleteProtectedRangeRequest
@dynamic protectedRangeId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteRangeRequest
//

@implementation GTLRSheets_DeleteRangeRequest
@dynamic range, shiftDimension;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeleteSheetRequest
//

@implementation GTLRSheets_DeleteSheetRequest
@dynamic sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeveloperMetadata
//

@implementation GTLRSheets_DeveloperMetadata
@dynamic location, metadataId, metadataKey, metadataValue, visibility;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeveloperMetadataLocation
//

@implementation GTLRSheets_DeveloperMetadataLocation
@dynamic dimensionRange, locationType, sheetId, spreadsheet;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DeveloperMetadataLookup
//

@implementation GTLRSheets_DeveloperMetadataLookup
@dynamic locationMatchingStrategy, locationType, metadataId, metadataKey,
         metadataLocation, metadataValue, visibility;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DimensionGroup
//

@implementation GTLRSheets_DimensionGroup
@dynamic collapsed, depth, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DimensionProperties
//

@implementation GTLRSheets_DimensionProperties
@dynamic dataSourceColumnReference, developerMetadata, hiddenByFilter,
         hiddenByUser, pixelSize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"developerMetadata" : [GTLRSheets_DeveloperMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DimensionRange
//

@implementation GTLRSheets_DimensionRange
@dynamic dimension, endIndex, sheetId, startIndex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DuplicateFilterViewRequest
//

@implementation GTLRSheets_DuplicateFilterViewRequest
@dynamic filterId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DuplicateFilterViewResponse
//

@implementation GTLRSheets_DuplicateFilterViewResponse
@dynamic filter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DuplicateSheetRequest
//

@implementation GTLRSheets_DuplicateSheetRequest
@dynamic insertSheetIndex, newSheetId, newSheetName, sourceSheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_DuplicateSheetResponse
//

@implementation GTLRSheets_DuplicateSheetResponse
@dynamic properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Editors
//

@implementation GTLRSheets_Editors
@dynamic domainUsersCanEdit, groups, users;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"groups" : [NSString class],
    @"users" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_EmbeddedChart
//

@implementation GTLRSheets_EmbeddedChart
@dynamic border, chartId, position, spec;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_EmbeddedObjectBorder
//

@implementation GTLRSheets_EmbeddedObjectBorder
@dynamic color, colorStyle;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_EmbeddedObjectPosition
//

@implementation GTLRSheets_EmbeddedObjectPosition
@dynamic newSheet, overlayPosition, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ErrorValue
//

@implementation GTLRSheets_ErrorValue
@dynamic message, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ExtendedValue
//

@implementation GTLRSheets_ExtendedValue
@dynamic boolValue, errorValue, formulaValue, numberValue, stringValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_FilterCriteria
//

@implementation GTLRSheets_FilterCriteria
@dynamic condition, hiddenValues, visibleBackgroundColor,
         visibleBackgroundColorStyle, visibleForegroundColor,
         visibleForegroundColorStyle;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"hiddenValues" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_FilterSpec
//

@implementation GTLRSheets_FilterSpec
@dynamic columnIndex, dataSourceColumnReference, filterCriteria;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_FilterView
//

@implementation GTLRSheets_FilterView
@dynamic criteria, filterSpecs, filterViewId, namedRangeId, range, sortSpecs,
         title;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"filterSpecs" : [GTLRSheets_FilterSpec class],
    @"sortSpecs" : [GTLRSheets_SortSpec class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_FilterView_Criteria
//

@implementation GTLRSheets_FilterView_Criteria

+ (Class)classForAdditionalProperties {
  return [GTLRSheets_FilterCriteria class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_FindReplaceRequest
//

@implementation GTLRSheets_FindReplaceRequest
@dynamic allSheets, find, includeFormulas, matchCase, matchEntireCell, range,
         replacement, searchByRegex, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_FindReplaceResponse
//

@implementation GTLRSheets_FindReplaceResponse
@dynamic formulasChanged, occurrencesChanged, rowsChanged, sheetsChanged,
         valuesChanged;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_GetSpreadsheetByDataFilterRequest
//

@implementation GTLRSheets_GetSpreadsheetByDataFilterRequest
@dynamic dataFilters, includeGridData;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_GradientRule
//

@implementation GTLRSheets_GradientRule
@dynamic maxpoint, midpoint, minpoint;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_GridCoordinate
//

@implementation GTLRSheets_GridCoordinate
@dynamic columnIndex, rowIndex, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_GridData
//

@implementation GTLRSheets_GridData
@dynamic columnMetadata, rowData, rowMetadata, startColumn, startRow;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columnMetadata" : [GTLRSheets_DimensionProperties class],
    @"rowData" : [GTLRSheets_RowData class],
    @"rowMetadata" : [GTLRSheets_DimensionProperties class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_GridProperties
//

@implementation GTLRSheets_GridProperties
@dynamic columnCount, columnGroupControlAfter, frozenColumnCount,
         frozenRowCount, hideGridlines, rowCount, rowGroupControlAfter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_GridRange
//

@implementation GTLRSheets_GridRange
@dynamic endColumnIndex, endRowIndex, sheetId, startColumnIndex, startRowIndex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_HistogramChartSpec
//

@implementation GTLRSheets_HistogramChartSpec
@dynamic bucketSize, legendPosition, outlierPercentile, series,
         showItemDividers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"series" : [GTLRSheets_HistogramSeries class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_HistogramRule
//

@implementation GTLRSheets_HistogramRule
@dynamic end, interval, start;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_HistogramSeries
//

@implementation GTLRSheets_HistogramSeries
@dynamic barColor, barColorStyle, data;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_InsertDimensionRequest
//

@implementation GTLRSheets_InsertDimensionRequest
@dynamic inheritFromBefore, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_InsertRangeRequest
//

@implementation GTLRSheets_InsertRangeRequest
@dynamic range, shiftDimension;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_InterpolationPoint
//

@implementation GTLRSheets_InterpolationPoint
@dynamic color, colorStyle, type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Interval
//

@implementation GTLRSheets_Interval
@dynamic endTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_IterativeCalculationSettings
//

@implementation GTLRSheets_IterativeCalculationSettings
@dynamic convergenceThreshold, maxIterations;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_KeyValueFormat
//

@implementation GTLRSheets_KeyValueFormat
@dynamic position, textFormat;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_LineStyle
//

@implementation GTLRSheets_LineStyle
@dynamic type, width;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Link
//

@implementation GTLRSheets_Link
@dynamic uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_LookerDataSourceSpec
//

@implementation GTLRSheets_LookerDataSourceSpec
@dynamic explore, instanceUri, model;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ManualRule
//

@implementation GTLRSheets_ManualRule
@dynamic groups;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"groups" : [GTLRSheets_ManualRuleGroup class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ManualRuleGroup
//

@implementation GTLRSheets_ManualRuleGroup
@dynamic groupName, items;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSheets_ExtendedValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_MatchedDeveloperMetadata
//

@implementation GTLRSheets_MatchedDeveloperMetadata
@dynamic dataFilters, developerMetadata;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_MatchedValueRange
//

@implementation GTLRSheets_MatchedValueRange
@dynamic dataFilters, valueRange;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_MergeCellsRequest
//

@implementation GTLRSheets_MergeCellsRequest
@dynamic mergeType, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_MoveDimensionRequest
//

@implementation GTLRSheets_MoveDimensionRequest
@dynamic destinationIndex, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_NamedRange
//

@implementation GTLRSheets_NamedRange
@dynamic name, namedRangeId, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_NumberFormat
//

@implementation GTLRSheets_NumberFormat
@dynamic pattern, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_OrgChartSpec
//

@implementation GTLRSheets_OrgChartSpec
@dynamic labels, nodeColor, nodeColorStyle, nodeSize, parentLabels,
         selectedNodeColor, selectedNodeColorStyle, tooltips;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_OverlayPosition
//

@implementation GTLRSheets_OverlayPosition
@dynamic anchorCell, heightPixels, offsetXPixels, offsetYPixels, widthPixels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Padding
//

@implementation GTLRSheets_Padding
@dynamic bottom, left, right, top;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PasteDataRequest
//

@implementation GTLRSheets_PasteDataRequest
@dynamic coordinate, data, delimiter, html, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PieChartSpec
//

@implementation GTLRSheets_PieChartSpec
@dynamic domain, legendPosition, pieHole, series, threeDimensional;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotFilterCriteria
//

@implementation GTLRSheets_PivotFilterCriteria
@dynamic condition, visibleByDefault, visibleValues;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"visibleValues" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotFilterSpec
//

@implementation GTLRSheets_PivotFilterSpec
@dynamic columnOffsetIndex, dataSourceColumnReference, filterCriteria;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotGroup
//

@implementation GTLRSheets_PivotGroup
@dynamic dataSourceColumnReference, groupLimit, groupRule, label,
         repeatHeadings, showTotals, sortOrder, sourceColumnOffset, valueBucket,
         valueMetadata;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"valueMetadata" : [GTLRSheets_PivotGroupValueMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotGroupLimit
//

@implementation GTLRSheets_PivotGroupLimit
@dynamic applyOrder, countLimit;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotGroupRule
//

@implementation GTLRSheets_PivotGroupRule
@dynamic dateTimeRule, histogramRule, manualRule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotGroupSortValueBucket
//

@implementation GTLRSheets_PivotGroupSortValueBucket
@dynamic buckets, valuesIndex;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"buckets" : [GTLRSheets_ExtendedValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotGroupValueMetadata
//

@implementation GTLRSheets_PivotGroupValueMetadata
@dynamic collapsed, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotTable
//

@implementation GTLRSheets_PivotTable
@dynamic columns, criteria, dataExecutionStatus, dataSourceId, filterSpecs,
         rows, source, valueLayout, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [GTLRSheets_PivotGroup class],
    @"filterSpecs" : [GTLRSheets_PivotFilterSpec class],
    @"rows" : [GTLRSheets_PivotGroup class],
    @"values" : [GTLRSheets_PivotValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotTable_Criteria
//

@implementation GTLRSheets_PivotTable_Criteria

+ (Class)classForAdditionalProperties {
  return [GTLRSheets_PivotFilterCriteria class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PivotValue
//

@implementation GTLRSheets_PivotValue
@dynamic calculatedDisplayType, dataSourceColumnReference, formula, name,
         sourceColumnOffset, summarizeFunction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_PointStyle
//

@implementation GTLRSheets_PointStyle
@dynamic shape, size;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ProtectedRange
//

@implementation GTLRSheets_ProtectedRange
@dynamic descriptionProperty, editors, namedRangeId, protectedRangeId, range,
         requestingUserCanEdit, unprotectedRanges, warningOnly;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"unprotectedRanges" : [GTLRSheets_GridRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RandomizeRangeRequest
//

@implementation GTLRSheets_RandomizeRangeRequest
@dynamic range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RefreshCancellationStatus
//

@implementation GTLRSheets_RefreshCancellationStatus
@dynamic errorCode, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RefreshDataSourceObjectExecutionStatus
//

@implementation GTLRSheets_RefreshDataSourceObjectExecutionStatus
@dynamic dataExecutionStatus, reference;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RefreshDataSourceRequest
//

@implementation GTLRSheets_RefreshDataSourceRequest
@dynamic dataSourceId, force, isAll, references;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RefreshDataSourceResponse
//

@implementation GTLRSheets_RefreshDataSourceResponse
@dynamic statuses;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statuses" : [GTLRSheets_RefreshDataSourceObjectExecutionStatus class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RepeatCellRequest
//

@implementation GTLRSheets_RepeatCellRequest
@dynamic cell, fields, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Request
//

@implementation GTLRSheets_Request
@dynamic addBanding, addChart, addConditionalFormatRule, addDataSource,
         addDimensionGroup, addFilterView, addNamedRange, addProtectedRange,
         addSheet, addSlicer, appendCells, appendDimension, autoFill,
         autoResizeDimensions, cancelDataSourceRefresh, clearBasicFilter,
         copyPaste, createDeveloperMetadata, cutPaste, deleteBanding,
         deleteConditionalFormatRule, deleteDataSource, deleteDeveloperMetadata,
         deleteDimension, deleteDimensionGroup, deleteDuplicates,
         deleteEmbeddedObject, deleteFilterView, deleteNamedRange,
         deleteProtectedRange, deleteRange, deleteSheet, duplicateFilterView,
         duplicateSheet, findReplace, insertDimension, insertRange, mergeCells,
         moveDimension, pasteData, randomizeRange, refreshDataSource,
         repeatCell, setBasicFilter, setDataValidation, sortRange,
         textToColumns, trimWhitespace, unmergeCells, updateBanding,
         updateBorders, updateCells, updateChartSpec,
         updateConditionalFormatRule, updateDataSource, updateDeveloperMetadata,
         updateDimensionGroup, updateDimensionProperties,
         updateEmbeddedObjectBorder, updateEmbeddedObjectPosition,
         updateFilterView, updateNamedRange, updateProtectedRange,
         updateSheetProperties, updateSlicerSpec, updateSpreadsheetProperties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Response
//

@implementation GTLRSheets_Response
@dynamic addBanding, addChart, addDataSource, addDimensionGroup, addFilterView,
         addNamedRange, addProtectedRange, addSheet, addSlicer,
         cancelDataSourceRefresh, createDeveloperMetadata,
         deleteConditionalFormatRule, deleteDeveloperMetadata,
         deleteDimensionGroup, deleteDuplicates, duplicateFilterView,
         duplicateSheet, findReplace, refreshDataSource, trimWhitespace,
         updateConditionalFormatRule, updateDataSource, updateDeveloperMetadata,
         updateEmbeddedObjectPosition;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_RowData
//

@implementation GTLRSheets_RowData
@dynamic values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [GTLRSheets_CellData class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ScorecardChartSpec
//

@implementation GTLRSheets_ScorecardChartSpec
@dynamic aggregateType, baselineValueData, baselineValueFormat,
         customFormatOptions, keyValueData, keyValueFormat, numberFormatSource,
         scaleFactor;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SearchDeveloperMetadataRequest
//

@implementation GTLRSheets_SearchDeveloperMetadataRequest
@dynamic dataFilters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SearchDeveloperMetadataResponse
//

@implementation GTLRSheets_SearchDeveloperMetadataResponse
@dynamic matchedDeveloperMetadata;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"matchedDeveloperMetadata" : [GTLRSheets_MatchedDeveloperMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SetBasicFilterRequest
//

@implementation GTLRSheets_SetBasicFilterRequest
@dynamic filter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SetDataValidationRequest
//

@implementation GTLRSheets_SetDataValidationRequest
@dynamic range, rule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Sheet
//

@implementation GTLRSheets_Sheet
@dynamic bandedRanges, basicFilter, charts, columnGroups, conditionalFormats,
         data, developerMetadata, filterViews, merges, properties,
         protectedRanges, rowGroups, slicers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bandedRanges" : [GTLRSheets_BandedRange class],
    @"charts" : [GTLRSheets_EmbeddedChart class],
    @"columnGroups" : [GTLRSheets_DimensionGroup class],
    @"conditionalFormats" : [GTLRSheets_ConditionalFormatRule class],
    @"data" : [GTLRSheets_GridData class],
    @"developerMetadata" : [GTLRSheets_DeveloperMetadata class],
    @"filterViews" : [GTLRSheets_FilterView class],
    @"merges" : [GTLRSheets_GridRange class],
    @"protectedRanges" : [GTLRSheets_ProtectedRange class],
    @"rowGroups" : [GTLRSheets_DimensionGroup class],
    @"slicers" : [GTLRSheets_Slicer class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SheetProperties
//

@implementation GTLRSheets_SheetProperties
@dynamic dataSourceSheetProperties, gridProperties, hidden, index, rightToLeft,
         sheetId, sheetType, tabColor, tabColorStyle, title;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Slicer
//

@implementation GTLRSheets_Slicer
@dynamic position, slicerId, spec;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SlicerSpec
//

@implementation GTLRSheets_SlicerSpec
@dynamic applyToPivotTables, backgroundColor, backgroundColorStyle, columnIndex,
         dataRange, filterCriteria, horizontalAlignment, textFormat, title;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SortRangeRequest
//

@implementation GTLRSheets_SortRangeRequest
@dynamic range, sortSpecs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sortSpecs" : [GTLRSheets_SortSpec class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SortSpec
//

@implementation GTLRSheets_SortSpec
@dynamic backgroundColor, backgroundColorStyle, dataSourceColumnReference,
         dimensionIndex, foregroundColor, foregroundColorStyle, sortOrder;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SourceAndDestination
//

@implementation GTLRSheets_SourceAndDestination
@dynamic dimension, fillLength, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_Spreadsheet
//

@implementation GTLRSheets_Spreadsheet
@dynamic dataSources, dataSourceSchedules, developerMetadata, namedRanges,
         properties, sheets, spreadsheetId, spreadsheetUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataSources" : [GTLRSheets_DataSource class],
    @"dataSourceSchedules" : [GTLRSheets_DataSourceRefreshSchedule class],
    @"developerMetadata" : [GTLRSheets_DeveloperMetadata class],
    @"namedRanges" : [GTLRSheets_NamedRange class],
    @"sheets" : [GTLRSheets_Sheet class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SpreadsheetProperties
//

@implementation GTLRSheets_SpreadsheetProperties
@dynamic autoRecalc, defaultFormat, importFunctionsExternalUrlAccessAllowed,
         iterativeCalculationSettings, locale, spreadsheetTheme, timeZone,
         title;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_SpreadsheetTheme
//

@implementation GTLRSheets_SpreadsheetTheme
@dynamic primaryFontFamily, themeColors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"themeColors" : [GTLRSheets_ThemeColorPair class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TextFormat
//

@implementation GTLRSheets_TextFormat
@dynamic bold, fontFamily, fontSize, foregroundColor, foregroundColorStyle,
         italic, link, strikethrough, underline;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TextFormatRun
//

@implementation GTLRSheets_TextFormatRun
@dynamic format, startIndex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TextPosition
//

@implementation GTLRSheets_TextPosition
@dynamic horizontalAlignment;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TextRotation
//

@implementation GTLRSheets_TextRotation
@dynamic angle, vertical;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TextToColumnsRequest
//

@implementation GTLRSheets_TextToColumnsRequest
@dynamic delimiter, delimiterType, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ThemeColorPair
//

@implementation GTLRSheets_ThemeColorPair
@dynamic color, colorType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TimeOfDay
//

@implementation GTLRSheets_TimeOfDay
@dynamic hours, minutes, nanos, seconds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TreemapChartColorScale
//

@implementation GTLRSheets_TreemapChartColorScale
@dynamic maxValueColor, maxValueColorStyle, midValueColor, midValueColorStyle,
         minValueColor, minValueColorStyle, noDataColor, noDataColorStyle;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TreemapChartSpec
//

@implementation GTLRSheets_TreemapChartSpec
@dynamic colorData, colorScale, headerColor, headerColorStyle, hideTooltips,
         hintedLevels, labels, levels, maxValue, minValue, parentLabels,
         sizeData, textFormat;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TrimWhitespaceRequest
//

@implementation GTLRSheets_TrimWhitespaceRequest
@dynamic range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_TrimWhitespaceResponse
//

@implementation GTLRSheets_TrimWhitespaceResponse
@dynamic cellsChangedCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UnmergeCellsRequest
//

@implementation GTLRSheets_UnmergeCellsRequest
@dynamic range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateBandingRequest
//

@implementation GTLRSheets_UpdateBandingRequest
@dynamic bandedRange, fields;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateBordersRequest
//

@implementation GTLRSheets_UpdateBordersRequest
@dynamic bottom, innerHorizontal, innerVertical, left, range, right, top;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateCellsRequest
//

@implementation GTLRSheets_UpdateCellsRequest
@dynamic fields, range, rows, start;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRSheets_RowData class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateChartSpecRequest
//

@implementation GTLRSheets_UpdateChartSpecRequest
@dynamic chartId, spec;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateConditionalFormatRuleRequest
//

@implementation GTLRSheets_UpdateConditionalFormatRuleRequest
@dynamic index, newIndex, rule, sheetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateConditionalFormatRuleResponse
//

@implementation GTLRSheets_UpdateConditionalFormatRuleResponse
@dynamic newIndex, newRule, oldIndex, oldRule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateDataSourceRequest
//

@implementation GTLRSheets_UpdateDataSourceRequest
@dynamic dataSource, fields;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateDataSourceResponse
//

@implementation GTLRSheets_UpdateDataSourceResponse
@dynamic dataExecutionStatus, dataSource;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateDeveloperMetadataRequest
//

@implementation GTLRSheets_UpdateDeveloperMetadataRequest
@dynamic dataFilters, developerMetadata, fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataFilters" : [GTLRSheets_DataFilter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateDeveloperMetadataResponse
//

@implementation GTLRSheets_UpdateDeveloperMetadataResponse
@dynamic developerMetadata;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"developerMetadata" : [GTLRSheets_DeveloperMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateDimensionGroupRequest
//

@implementation GTLRSheets_UpdateDimensionGroupRequest
@dynamic dimensionGroup, fields;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateDimensionPropertiesRequest
//

@implementation GTLRSheets_UpdateDimensionPropertiesRequest
@dynamic dataSourceSheetRange, fields, properties, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateEmbeddedObjectBorderRequest
//

@implementation GTLRSheets_UpdateEmbeddedObjectBorderRequest
@dynamic border, fields, objectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateEmbeddedObjectPositionRequest
//

@implementation GTLRSheets_UpdateEmbeddedObjectPositionRequest
@dynamic fields, newPosition, objectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateEmbeddedObjectPositionResponse
//

@implementation GTLRSheets_UpdateEmbeddedObjectPositionResponse
@dynamic position;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateFilterViewRequest
//

@implementation GTLRSheets_UpdateFilterViewRequest
@dynamic fields, filter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateNamedRangeRequest
//

@implementation GTLRSheets_UpdateNamedRangeRequest
@dynamic fields, namedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateProtectedRangeRequest
//

@implementation GTLRSheets_UpdateProtectedRangeRequest
@dynamic fields, protectedRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateSheetPropertiesRequest
//

@implementation GTLRSheets_UpdateSheetPropertiesRequest
@dynamic fields, properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateSlicerSpecRequest
//

@implementation GTLRSheets_UpdateSlicerSpecRequest
@dynamic fields, slicerId, spec;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateSpreadsheetPropertiesRequest
//

@implementation GTLRSheets_UpdateSpreadsheetPropertiesRequest
@dynamic fields, properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateValuesByDataFilterResponse
//

@implementation GTLRSheets_UpdateValuesByDataFilterResponse
@dynamic dataFilter, updatedCells, updatedColumns, updatedData, updatedRange,
         updatedRows;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_UpdateValuesResponse
//

@implementation GTLRSheets_UpdateValuesResponse
@dynamic spreadsheetId, updatedCells, updatedColumns, updatedData, updatedRange,
         updatedRows;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_ValueRange
//

@implementation GTLRSheets_ValueRange
@dynamic majorDimension, range, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_WaterfallChartColumnStyle
//

@implementation GTLRSheets_WaterfallChartColumnStyle
@dynamic color, colorStyle, label;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_WaterfallChartCustomSubtotal
//

@implementation GTLRSheets_WaterfallChartCustomSubtotal
@dynamic dataIsSubtotal, label, subtotalIndex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_WaterfallChartDomain
//

@implementation GTLRSheets_WaterfallChartDomain
@dynamic data, reversed;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_WaterfallChartSeries
//

@implementation GTLRSheets_WaterfallChartSeries
@dynamic customSubtotals, data, dataLabel, hideTrailingSubtotal,
         negativeColumnsStyle, positiveColumnsStyle, subtotalColumnsStyle;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"customSubtotals" : [GTLRSheets_WaterfallChartCustomSubtotal class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSheets_WaterfallChartSpec
//

@implementation GTLRSheets_WaterfallChartSpec
@dynamic connectorLineStyle, domain, firstValueIsTotal, hideConnectorLines,
         series, stackedType, totalDataLabel;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"series" : [GTLRSheets_WaterfallChartSeries class]
  };
  return map;
}

@end

#pragma clang diagnostic pop
