<?xml version="1.0"?>

<!-- ======================================================================
     Copyright 2011-2012 Google Inc.  All Rights Reserved.
     Author: kerr@google.com (Debby Wallach)
     Author: lizlooney@google.com (Liz Looney)
     Copyright © 2012-2017 Massachusetts Institute of Technology. All Rights Reserved.
     Author: jis@mit.edu (Jeffrey I. Schiller)
     Author: hal@mit.edu (Hal Abelson)
     Author: ram8647@gmail.com (Ralph Morelli)
     Author: andrew.f.mckinney@gmail.com (Andrew F. McKinney)
     Author: paulmedwal@gmail.com (Paul Medlock-Walton)
     Author: josmasflores@gmail.com (José Dominguez)
     Author: ewpatton@mit.edu (Evan W. Patton)

     App Inventor appengine app
     ====================================================================== -->

<project name="appengine" default="all" xmlns:if="ant:if" xmlns:unless="ant:unless">
  <description>
    Appengine server and client code
  </description>

  <!-- =====================================================================
       Definition for generating a Unique ID.
       ===================================================================== -->

  <property name="release" value="false"/>
  <property name="sourceMaps" value="false"/>

  <condition property="client.module"
             value="com.google.appinventor.YaClient"
             else="com.google.appinventor.YaClient-dev">
    <equals arg1="${release}" arg2="true" />
  </condition>

  <condition property="client.flags"
             value="-optimize 9 -localWorkers 8"
             else="-style pretty">
    <equals arg1="${release}" arg2="true" />
  </condition>

  <condition property="XstartOnFirstThread" value="-XstartOnFirstThread">
    <os family="mac"/>
  </condition>
  <condition property="XstartOnFirstThread" value="">
    <not><os family="mac"/></not>
  </condition>

  <target name="all"
          depends="AiServerLib,AiClientLib,AiRebindLib,YaClientApp,CopyToBuildWarPost,Keystore,WarLibs,InstallAuthKey">
  </target>

  <target name="tests"
          depends="AiClientLibTests,AiSharedLibTests,AiServerLibTests">
  </target>


  <!-- =====================================================================
       Import common directory, task, and target definitions.
       ===================================================================== -->
  <import file="../build-common.xml" />

  <property name="gwt.sdk" location="${lib.dir}/gwt/2.8.1-patched" />
  <property name="appengine.sdk" location="${lib.dir}/appengine" />

  <property name="build.war.dir" location="${local.build.dir}/war" />
  <property name="build.extra.dir" location="${local.build.dir}/extra" />
  <property name="build.static.dir" location="${build.war.dir}/static" />

  <!-- =====================================================================
       Check whether or not the documentation needs to be (re-)compiled
       ===================================================================== -->
  <target name="CheckDocs">
    <uptodate property="Docs.uptodate">
      <srcfiles dir="${appinventor.dir}/docs/markdown">
        <include name="reference/**/*" />
      </srcfiles>
      <firstmatchmapper>
        <globmapper from="*.md" to="${appinventor.dir}/docs/html/*.html" />
        <globmapper from="*" to="${appinventor.dir}/docs/html/*" />
      </firstmatchmapper>
    </uptodate>
  </target>

  <!-- =====================================================================
       Builds the documentation from the corresponding Markdown files.
       ===================================================================== -->
  <target name="BuildDocs" depends="components_AndroidRuntime,CheckDocs"
          unless="Docs.uptodate">
    <!-- Jenkins will pass -Dforce.builddocs=true to ensure docs build correctly -->
    <property name="force.builddocs" value="false" />
    <!-- We set failifexecutionfails to false so the whole build doesn't fail
         if the developer doesn't have Jekyll set up -->
    <exec executable="bundle" failonerror="${force.builddocs}"
          failifexecutionfails="${force.builddocs}"
          dir="${docs.dir}/markdown" >
      <arg value="install" />
      <arg value="--path" />
      <arg value="vendor/bundle" />
    </exec>
    <exec executable="bundle" failonerror="${force.builddocs}"
          failifexecutionfails="${force.builddocs}"
          dir="${docs.dir}/markdown" >
      <arg value="exec" />
      <arg value="jekyll" />
      <arg value="build" />
      <arg value="-d" />
      <arg value="${docs.dir}/html" />
    </exec>
  </target>

  <!-- =====================================================================
       Copy static files to <build>/war, from war and elsewhere
       ===================================================================== -->
  <target name="CopyToBuildWar"
          description="Create and populate build/war directory structure"
          depends="init,blocklyeditor_BlocklyTranslationGenerator,BuildDocs">
    <mkdir dir="${build.war.dir}" />
    <copy todir="${build.war.dir}/">
      <fileset dir="war">
        <exclude name="index.jsp" />
      </fileset>
      <fileset dir="${docs.dir}">
        <include name="companions/*"/>
      </fileset>
      <fileset dir="${docs.dir}/html">
        <include name="index.html"/>
        <include name="reference/**/*"/>
        <exclude name="static/*"/>
        <exclude name="assets/*"/>
        <exclude name="images/*"/>
        <exclude name="js/*"/>
        <exclude name="css/*"/>
        <!-- Jekyll generates this even if we don't include the plugin -->
        <exclude name="feed.xml"/>
      </fileset>
    </copy>
    <copy todir="${build.static.dir}/css" flatten="true">
      <fileset dir="${lib.dir}/blockly">
        <include name="**/*.css"/>
      </fileset>
      <fileset dir="${appinventor.dir}/blocklyeditor">
        <include name="media/*.css"/>
      </fileset>
      <fileset dir="${docs.dir}/html/static/css">
        <include name="*"/>
      </fileset>
    </copy>
    <mkdir dir="${build.static.dir}/media"/>
    <copy todir="${build.static.dir}/media" flatten="true">
      <fileset dir="${lib.dir}/blockly">
        <include name="media/*"/>
        <exclude name="media/*.css"/>
        <exclude name="demo/**"/>
      </fileset>
      <fileset dir="${appinventor.dir}/blocklyeditor">
        <include name="media/*"/>
        <exclude name="media/*.css"/>
      </fileset>
    </copy>

    <copy todir="${build.static.dir}">
      <fileset dir="src/${appinventor.pkg}">
        <!-- canvas is a special case (see MockCanvas.java) -->
        <include name="images/canvas.png" />
      </fileset>
      <fileset dir="${lib.dir}">
        <include name="closure-library/closure/goog/base.js"/>
        <include name="closure-library/closure/goog/css/dialog.css"/>
        <include name="closure-library/closure/goog/css/hsvapalette.css"/>
        <include name="closure-library/closure/goog/deps.js"/>
      </fileset>
      <fileset dir="${docs.dir}/html/static">
        <include name="js/*"/>
      </fileset>
      <fileset dir="src/${appinventor.pkg}">
        <include name="images/help.png"/>
      </fileset>
    </copy>
    <!-- Resources for Maps designer view -->
    <copy todir="${build.static.dir}/">
      <fileset dir="${lib.dir}">
        <include name="leaflet/**/*"/>
        <include name="font-awesome/**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="CopyToBuildWarPost">
    <mkdir dir="${build.war.dir}/ode" />
    <checksum property="blocklyeditor_BlocklyChecksum" algorithm="SHA-256" if:true="${release}">
      <fileset dir="${build.dir}">
        <include name="blocklyeditor/blockly-all.js"/>
      </fileset>
    </checksum>
    <property name="blocklyeditor_BlocklyChecksum" value="0"/>
    <condition property="blocklyeditor_postfix" value="cache" else="nocache">
      <equals arg1="${release}" arg2="true" />
    </condition>
    <copy file="${build.dir}/blocklyeditor/blockly-all.js" tofile="${build.war.dir}/ode/aiblockly-${blocklyeditor_BlocklyChecksum}.${blocklyeditor_postfix}.js" />
    <copy todir="${build.war.dir}/ode">
      <fileset dir="${build.dir}/blocklyeditor">
        <include name="*.js.map"/>
      </fileset>
    </copy>
    <filter token="blocklyeditor_BlocklyChecksum" value="${blocklyeditor_BlocklyChecksum}.${blocklyeditor_postfix}" />
    <filter token="blocklyeditor_isRelease" value="${release}" />
    <copy todir="${build.war.dir}" filtering="true" overwrite="true">
      <fileset dir="war">
        <include name="index.jsp"/>
      </fileset>
    </copy>

    <!-- Move Blockly translations into place -->
    <mkdir dir="${build.war.dir}/WEB-INF/classes/com/google/appinventor/client/editor/youngandroid/i18n"/>
    <copy todir="${build.war.dir}/WEB-INF/classes/com/google/appinventor/client/editor/youngandroid/i18n">
      <fileset dir="${build.dir}/blocklyeditor/msg">
        <include name="*.json"/>
      </fileset>
    </copy>
    <copy todir="${build.war.dir}/ode/">
      <fileset dir="${build.dir}/blocklyeditor/msg">
        <include name="*.js"/>
      </fileset>
    </copy>

    <!-- Compile the Blockly translations map -->
    <javac destdir="${build.war.dir}/WEB-INF/classes" srcdir="${public.build.dir}/../blocklyeditor" source="1.8" target="1.8">
      <include name="msg/i18n.java"/>
    </javac>
  </target>

  <!-- =====================================================================
       Create the keystore that is used by AiServerLib to encrypt user and
       project IDs.
       CheckKeystore checks whether the keystore has already been created.
       ===================================================================== -->
  <target name="CheckKeystore">
    <!-- If build/war/keystore/1 exists, set keystore.present to true.
         Otherwise, set keystore.present to false -->
    <available file="${build.war.dir}/WEB-INF/keystore/1" property="keystore.present"/>
  </target>

  <target name="Keystore"
          description="Generate the key used by .../server/encryption/KeyczarEncryptor"
          depends="CheckKeystore,CopyToBuildWar"
          unless="keystore.present">
    <echo message="Using KeyczarTool to generate keystore"/>
    <mkdir dir="${build.war.dir}/WEB-INF/keystore"/>
    <java failonerror="true" fork="true" jar="${lib.dir}/keyczar/KeyczarTool.jar">
      <arg line="create --purpose=crypt"/>
      <arg value="--location=${build.war.dir}/WEB-INF/keystore"/>
    </java>
    <java failonerror="true" fork="true" jar="${lib.dir}/keyczar/KeyczarTool.jar">
      <arg line="addkey"/>
      <arg value="--location=${build.war.dir}/WEB-INF/keystore"/>
    </java>
    <java failonerror="true" fork="true" jar="${lib.dir}/keyczar/KeyczarTool.jar">
      <arg line="promote --version=1"/>
      <arg value="--location=${build.war.dir}/WEB-INF/keystore"/>
    </java>
  </target>

  <!-- =====================================================================
       Copy jars needed by AiSharedLib and AiServerLib, that are either
       external or built by other projects, to <build>/war/WEB-INF/lib.
       ===================================================================== -->
  <target name="MakeWarLibsDir"
          description="Creates build/war/WEB-INF/lib"
          depends="init">
    <mkdir dir="${build.war.dir}/WEB-INF/lib" />
  </target>
  <target name="WarLibs"
          description="Copy libs to build/war/WEB-INF/lib"
          depends="init,MakeWarLibsDir,common_CommonUtils,common_CommonVersion,components_CommonConstants">
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${build.dir}/common/CommonUtils.jar"/>
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${build.dir}/common/CommonVersion.jar"/>
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${build.dir}/components/CommonConstants.jar"/>
    <!-- external libs -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/commons-fileupload/commons-fileupload-1.2.2.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/findbugs/jsr305.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/guava/guava-20.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/firebase/firebase-token-generator-2.0.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/commons-codec/commons-codec-1.7.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/json/json.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/keyczar/keyczar-0.66-080111-java-1.6.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/objectify-3.1/objectify-3.1.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gson/gson-2.1.jar" />  <!-- for keyczar -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/log4j/log4j-1.2.16.jar" />  <!-- for keyczar -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/commons-lang3/commons-lang3-3.10.jar" />
    <!-- GCS Libs -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/appengine-gcs-client-0.6.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/jackson-core-2.1.3.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-api-client-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-api-client-jackson2-1.20.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-api-client-appengine-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-http-client-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-http-client-appengine-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-http-client-jackson-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-http-client-jackson2-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/google-api-services-storage-v1-rev91-1.22.0.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/httpclient-4.0.1.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/gcs/joda-time-2.6.jar" />
    <!-- gwt libs -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-deps.jar" />
    <!-- Protocol Buffers -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/protobuf/protobuf-java-4.28.1.jar" />
    <!-- OWASP -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${lib.dir}/owasp/owasp-java-html-sanitizer-20160628.1.jar" />
    <!-- Add any additional server libs that need to be copied -->
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${appengine.sdk}/appengine-api-1.0-sdk-2.0.19.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${appengine.sdk}/geronimo-jpa_3.0_spec-1.1.1.jar" />
  </target>

  <!-- =====================================================================
       Define base package path.
       ===================================================================== -->
  <property name="appinventor.pkg" value="com/google/appinventor" />


  <!-- =====================================================================
       AiServer library
       ===================================================================== -->
  <target name="AiServerLib"
          description="App Inventor Server library"
          depends="init,WarLibs,AiSharedLib">
    <property name="AiServerLib-class.dir" location="${class.dir}/AiServerLib" />
    <mkdir dir="${AiServerLib-class.dir}" />
    <copy todir="${AiServerLib-class.dir}/${appinventor.pkg}/server">
      <fileset dir="src/${appinventor.pkg}/server/" includes="*.properties" />
    </copy>
    <ai.javac destdir="${AiServerLib-class.dir}">
      <include name="${appinventor.pkg}/server/**/*.java" />
      <classpath>
        <!-- jars that we put in <build>/war/WEB-INF/lib -->
        <fileset dir="${build.war.dir}/WEB-INF/lib" includes="*.jar" excludes="AiServerLib.jar"/>
        <!-- gwt lib needed only at compile time for javax.servlet.http.HttpServlet* -->
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
      </classpath>
    </ai.javac>

    <jar basedir="${AiServerLib-class.dir}"
         destfile="${local.build.dir}/AiServerLib.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${local.build.dir}/AiServerLib.jar"/>
  </target>

  <!-- =====================================================================
       Checks to see if we have our own authkey ZIP file.
       ===================================================================== -->
  <target name="CheckAuthKey"
          depends="init">
    <available file="${user.home}/.appinventor/authkey.zip"
               property="authkey.exists" />
  </target>

  <!-- =====================================================================
       Makes the authkey file if it doesn't exist. This target needs
       to be called explicitly. We do not run automatically so we
       cannot accidentally over-write a valid existing file.
       ===================================================================== -->
  <target name="MakeAuthKey"
          depends="init,CheckAuthKey" unless="${authkey.exists}">
    <tempfile prefix="mkkey" property="tmp.dir" destdir="${java.io.tmpdir}"/>
    <mkdir dir="${tmp.dir}/authkey"/>
    <java failonerror="true" fork="true"
          jar="${lib.dir}/keyczar/KeyczarTool.jar">
      <arg line="create --location=${tmp.dir}/authkey
                 --purpose=crypt"/>
    </java>
    <java failonerror="true" fork="true"
          jar="${lib.dir}/keyczar/KeyczarTool.jar">
      <arg line="addkey --location=${tmp.dir}/authkey"/>
    </java>
    <java failonerror="true" fork="true"
          jar="${lib.dir}/keyczar/KeyczarTool.jar">
      <arg line="promote --location=${tmp.dir}/authkey
                 --version=1"/>
    </java>
    <zip destfile="${user.home}/.appinventor/authkey.zip"
         basedir="${tmp.dir}" includes="authkey/**" />
    <delete file="${tmp.dir}/authkey/meta"/>
    <delete file="${tmp.dir}/authkey/1"/>
  </target>
  <!-- =====================================================================
       Check to see if the war/WEB-INF directory already has an
       authkey, which would mean it was copied over in WarLibs from
       the source tree. In the master branch this will *not* be the
       case, but it may be in a branding branch.
       ===================================================================== -->
  <target name="CheckBuildAuthKey"
          depends="init,WarLibs">
    <available file="${build.war.dir}/WEB-INF/authkey/meta"
               property="authkey.inbuild" />
  </target>
  <!-- =====================================================================
       Install the Authkey into the correct location
       but only if we don't already have one copied over
       from war/WEB-INF.
       ===================================================================== -->
  <target name="InstallAuthKey"
          depends="init,CheckAuthKey,WarLibs,CheckBuildAuthKey"
          unless="${authkey.inbuild}">
    <fail message="You Must Create an Auth Key see misc/docs/authkey.md"
          unless="${authkey.exists}" />
    <unzip dest="${build.war.dir}/WEB-INF"
           src="${user.home}/.appinventor/authkey.zip" />
  </target>

  <!-- =====================================================================
       AiServerLibTests: build and run the AiServerLib tests and generate the output results
       ===================================================================== -->

  <path id="libsForAiServerLibTests.path">
    <pathelement location="${local.build.dir}/AiServerLib.jar" />
    <pathelement location="${local.build.dir}/AiSharedLib.jar" />
    <pathelement location="${build.dir}/common/CommonUtils.jar" />
    <pathelement location="${build.dir}/common/CommonTestUtils.jar" />
    <pathelement location="${build.dir}/common/CommonVersion.jar" />
    <pathelement location="${build.dir}/components/CommonConstants.jar"/>
    <pathelement location="${lib.dir}/guava/guava-20.0.jar" />
    <pathelement location="${lib.dir}/guava/error_prone_annotations-2.0.12.jar" />
    <pathelement location="${lib.dir}/guava/j2objc-annotations-1.1.jar" />
    <pathelement location="${lib.dir}/json/json.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.13.2.jar" />
    <pathelement location="${lib.dir}/junit-addons/junit-addons-1.4.jar" />
    <pathelement location="${lib.dir}/keyczar/KeyczarTool.jar" />
    <pathelement location="${lib.dir}/objectify-3.1/objectify-3.1.jar" />

    <!-- Powermock and dependencies -->
    <fileset dir="${lib.dir}/powermock" includes="*.jar" />

    <pathelement location="${lib.dir}/responder-iq/responderiq-test.jar" />
    <pathelement location="${lib.dir}/gcs/appengine-gcs-client-0.6.jar" />
    <pathelement location="${lib.dir}/gcs/jackson-core-2.1.3.jar" />
    <pathelement location="${lib.dir}/gcs/google-api-client-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/google-api-client-appengine-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/google-http-client-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/google-http-client-appengine-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/google-http-client-jackson-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/google-http-client-jackson2-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/google-api-services-storage-v1-rev91-1.22.0.jar" />
    <pathelement location="${lib.dir}/gcs/httpclient-4.0.1.jar" />
    <pathelement location="${lib.dir}/gcs/joda-time-2.6.jar" />
    <pathelement location="${lib.dir}/protobuf/protobuf-java-4.28.1.jar" />
    <pathelement location="${gwt.sdk}/gwt-servlet.jar" />
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="${appengine.sdk}/appengine-api-1.0-sdk-2.0.19.jar" />
    <pathelement location="${appengine.sdk}/appengine-testing-2.0.19.jar" />
    <pathelement location="${appengine.sdk}/appengine-api-stubs-2.0.19.jar" />
    <pathelement location="${appengine.sdk}/appengine-tools-sdk-2.0.19.jar" />
    <pathelement location="${appengine.sdk}/appengine-remote-api-2.0.19.jar" />
    <pathelement location="${appengine.sdk}/geronimo-jpa_3.0_spec-1.1.1.jar" />
    <fileset dir="${build.war.dir}/WEB-INF/lib" includes="*.jar" excludes="AiServerLib.jar"/>
  </path>

  <path id="AiServerLibTests.path">
    <path refid="libsForAiServerLibTests.path"/>
    <pathelement location="${local.build.dir}/AiServerLibTests.jar" />
  </path>

  <target name="AiServerLibTests"
          depends="AiServerLib,common_CommonTestUtils,common_CommonUtils,common_CommonVersion,Keystore"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="AiServerLibTests"
                aij-dir="${appinventor.pkg}/server" >
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       AiShared library
       ===================================================================== -->
  <target name="AiSharedLib"
          description="App Inventor Shared library"
          depends="init,WarLibs">

    <property name="AiSharedLib-class.dir" location="${class.dir}/AiSharedLib" />
    <mkdir dir="${AiSharedLib-class.dir}" />

    <ai.javac destdir="${AiSharedLib-class.dir}">
      <include name="${appinventor.pkg}/shared/**/*.java" />
      <classpath>
        <!-- jars that we put in <build>/war/WEB-INF/lib -->
        <fileset dir="${build.war.dir}/WEB-INF/lib" includes="*.jar" excludes="AiSharedLib.jar"/>
      </classpath>
    </ai.javac>

    <jar basedir="${AiSharedLib-class.dir}"
         destfile="${local.build.dir}/AiSharedLib.jar" />
    <copy todir="${build.war.dir}/WEB-INF/lib" file="${local.build.dir}/AiSharedLib.jar"/>

  </target>

  <!-- =====================================================================
       AiSharedLibTests: build and run the AiSharedLib tests and generate the output results
       ===================================================================== -->

  <!-- requires AiServerLib for files in /server/properties/json -->
  <path id="libsForAiSharedLibTests.path">
    <pathelement location="${local.build.dir}/AiSharedLib.jar" />
    <pathelement location="${local.build.dir}/AiServerLib.jar" />
    <pathelement location="${build.dir}/common/CommonUtils.jar" />
    <pathelement location="${lib.dir}/guava/guava-20.0.jar" />
    <pathelement location="${lib.dir}/guava/error_prone_annotations-2.0.12.jar" />
    <pathelement location="${lib.dir}/guava/j2objc-annotations-1.1.jar" />
    <pathelement location="${lib.dir}/json/json.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.13.2.jar" />
    <pathelement location="${lib.dir}/gcs/appengine-gcs-client-0.6.jar" />
    <pathelement location="${gwt.sdk}/gwt-servlet.jar" />
  </path>

  <path id="AiSharedLibTests.path">
    <path refid="libsForAiSharedLibTests.path"/>
    <pathelement location="${local.build.dir}/AiSharedLibTests.jar" />
  </path>

  <target name="AiSharedLibTests"
          depends="AiSharedLib,AiServerLib,common_CommonUtils"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="AiSharedLibTests"
                aij-dir="${appinventor.pkg}/shared" >
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       Rebind library
       ===================================================================== -->
  <target name="AiRebindLib"
          description="App Inventor Rebind library"
          depends="init">

    <property name="AiRebindLib-class.dir" location="${class.dir}/AiRebindLib" />
    <mkdir dir="${AiRebindLib-class.dir}" />

    <ai.javac destdir="${AiRebindLib-class.dir}">
      <include name="${appinventor.pkg}/rebind/**/*.java" />
      <classpath>
        <!-- gwt libs -->
        <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
      </classpath>
    </ai.javac>

    <jar destfile="${local.build.dir}/AiRebindLib.jar">
      <fileset dir="${AiRebindLib-class.dir}"/>
      <fileset dir="${src.dir}">
        <include name="**/AiRebindLib.gwt.xml" />
      </fileset>
    </jar>

  </target>


  <!-- =====================================================================
       AiClient library
       ===================================================================== -->
  <target name="AiClientLib"
          description="App Inventor Client library - compile java source to bytecode"
          depends="components_AndroidRuntime">
    <mkdir dir="${build.war.dir}/WEB-INF/classes"/>
    <ai.javac encoding="utf-8"
              destdir="${build.war.dir}/WEB-INF/classes"
              srcdir="${src.dir};${build.dir}/components/ComponentTranslation/src"
              nowarn="true"
              debug="true" debuglevel="lines,vars,source">
      <include name="${appinventor.pkg}/client/**/*.java" />
      <include name="${appinventor.pkg}/shared/**/*.java" />
      <classpath>
        <pathelement location="${build.dir}/common/CommonUtils.jar" />
        <pathelement location="${build.dir}/common/CommonVersion.jar" />
        <pathelement location="${build.dir}/components/CommonConstants.jar" />
        <pathelement location="${build.dir}/components/CommonConstants-gwt.jar" />
        <!-- external libs -->
        <pathelement location="${lib.dir}/charba/charba-2.5-sources.jar" />
        <pathelement location="${lib.dir}/guava/guava-20.0.jar" />
        <pathelement location="${lib.dir}/guava/error_prone_annotations-2.0.12.jar" />
        <pathelement location="${lib.dir}/guava/j2objc-annotations-1.1.jar" />
        <pathelement location="${lib.dir}/findbugs/jsr305.jar" />
        <pathelement location="${lib.dir}/gwt_dragdrop/gwt-dnd-3.2.3.jar" />
        <pathelement location="${lib.dir}/gwt_incubator/gwt-incubator-20101117-r1766.jar" />
        <pathelement location="${lib.dir}/gwt_query/gwtquery-1.5-beta1.jar" />
        <pathelement location="${lib.dir}/gwt_svg/lib-gwt-svg-0.5.15.jar" />
        <!-- gwt libs -->
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
        <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
        <pathelement location="${lib.dir}/json/json.jar" />
      </classpath>
    </ai.javac>
    <copy todir="${build.war.dir}/WEB-INF/classes/com/google/appinventor"
          file="${build.dir}/components/simple_components.json" />
    <copy todir="${build.war.dir}/WEB-INF/classes">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <!-- =====================================================================
       YaClientApp GWT application
       CheckYaClientApp - checks whether it is already up-to-date.
       ===================================================================== -->
  <target name="CheckYaClientApp"
          depends="common_CommonUtils,common_CommonVersion,components_CommonConstants,AiClientLib,AiRebindLib,CopyToBuildWar">
    <!-- If ode.nocache.js is up-to-date, set YaClientApp.uptodate to true.
         Otherwise, set YaClientApp.uptodate to false -->
    <uptodate property="YaClientApp.uptodate"
              targetfile="${build.war.dir}/ode/ode.nocache.js">
      <srcfiles dir="${build.war.dir}/WEB-INF/classes">
        <!-- This is compiled after YaClientApp in CopyToBuildWarPost -->
        <exclude name="msg/i18n.class"/>
      </srcfiles>
      <srcfiles file="${local.build.dir}/AiRebindLib.jar" />
      <srcfiles file="${build.dir}/common/CommonUtils-gwt.jar" />
      <srcfiles file="${build.dir}/common/CommonVersion-gwt.jar" />
      <srcfiles file="${build.dir}/components/CommonConstants-gwt.jar" />
    </uptodate>
  </target>

  <path id="YaClientApp.classpath">
    <pathelement location="src"/>
    <pathelement location="${build.dir}/components/ComponentTranslation/src"/>
    <pathelement location="${build.war.dir}/WEB-INF/classes"/>
    <pathelement location="${local.build.dir}/AiRebindLib.jar" />
    <pathelement location="${build.dir}/common/CommonUtils-gwt.jar" />
    <pathelement location="${build.dir}/common/CommonVersion-gwt.jar" />
    <pathelement location="${build.dir}/components/CommonConstants-gwt.jar" />
    <!-- external libs -->
    <pathelement location="${lib.dir}/findbugs/jsr305.jar" />
    <pathelement location="${lib.dir}/guava/guava-20.0.jar" />
    <pathelement location="${lib.dir}/guava/guava-gwt-20.0.jar" />
    <pathelement location="${lib.dir}/guava/error_prone_annotations-2.0.12.jar" />
    <pathelement location="${lib.dir}/guava/j2objc-annotations-1.1.jar" />
    <pathelement location="${lib.dir}/gwt_dragdrop/gwt-dnd-3.2.3.jar" />
    <pathelement location="${lib.dir}/gwt_incubator/gwt-incubator-20101117-r1766.jar" />
    <pathelement location="${lib.dir}/gwt_query/gwtquery-1.5-beta1.jar" />
    <pathelement location="${lib.dir}/gwt_svg/lib-gwt-svg-0.5.15.jar" />
    <pathelement location="${lib.dir}/charba/charba-2.5.jar" />
    <!-- gwt libs -->
    <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar" />
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar" />
  </path>

  <target name="YaClientApp"
          description="GWT compile to JavaScript"
          depends="common_CommonUtils,common_CommonVersion,components_CommonConstants,AiClientLib,AiRebindLib,CheckYaClientApp"
          unless="YaClientApp.uptodate">
    <mkdir dir="${build.extra.dir}" />
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <path refid="YaClientApp.classpath" />
      </classpath>
      <jvmarg value="-Xss2M"/>  <!-- increase if you see a StackOverflowError -->
      <jvmarg value="-Xmx4G"/>
      <jvmarg line="${XstartOnFirstThread}"/>
      <jvmarg value="-Dfile.encoding=UTF-8" />
      <arg value="-war"/>
      <arg value="${build.war.dir}"/>
      <arg line="-logLevel INFO"/>
      <arg value="-extra"/>
      <arg value="${build.extra.dir}"/>
      <arg line="-setProperty locale=${locale}" if:set="locale"/>
      <arg line="${client.flags} ${client.module}"/>
    </java>
    <copy todir="${build.war.dir}/ode"
          file="${appinventor.dir}/appengine/extra/cdnok.js" />
    <copy todir="${build.war.dir}/ode" if:true="${sourceMaps}">
      <fileset dir="${build.war.dir}/WEB-INF/deploy/ode/symbolMaps">
        <include name="*.json"/>
      </fileset>
      <fileset dir="${src.dir}/">
        <include name="${appinventor.pkg}/client/**/*.java"/>
        <include name="${appinventor.pkg}/shared/**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="devmode"
          depends="common_CommonUtils,common_CommonVersion,components_CommonConstants,AiClientLib,AiRebindLib,CheckYaClientApp"
          description="Run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.codeserver.CodeServer">
      <classpath>
        <path refid="YaClientApp.classpath" />
        <pathelement location="${gwt.sdk}/gwt-codeserver.jar" />
      </classpath>
      <jvmarg value="-Xmx3G" />
      <arg line="-style PRETTY -logLevel INFO" />
      <arg value="com.google.appinventor.YaClient-dev" />
      <arg value="-bindAddress"/>
      <arg value="0.0.0.0"/>
    </java>
  </target>

  <!-- =====================================================================
       AiClientLibTests: build and run the AiClientLib tests and generate the output results
       ===================================================================== -->

  <!-- requires AiServerLib for files in /server/properties/json -->
  <path id="libsForAiClientLibTests.path">
    <pathelement location="${build.war.dir}/WEB-INF/classes"/>
    <pathelement location="${local.build.dir}/AiServerLib.jar" />
    <pathelement location="${local.build.dir}/AiRebindLib.jar" />
    <pathelement location="${local.build.dir}/AiSharedLib.jar" />
    <pathelement location="${build.dir}/common/CommonTestUtils.jar" />
    <pathelement location="${build.dir}/components/CommonConstants.jar"/>
    <pathelement location="${build.dir}/components/CommonConstants-gwt.jar"/>
    <pathelement location="${build.dir}/common/CommonUtils.jar" />
    <pathelement location="${build.dir}/common/CommonUtils-gwt.jar" />
    <pathelement location="${build.dir}/common/CommonVersion-gwt.jar" />
    <pathelement location="${lib.dir}/guava/guava-20.0.jar" />
    <pathelement location="${lib.dir}/guava/error_prone_annotations-2.0.12.jar" />
    <pathelement location="${lib.dir}/guava/j2objc-annotations-1.1.jar" />
    <pathelement location="${lib.dir}/gwt_query/gwtquery-1.5-beta1.jar" />
    <pathelement location="${lib.dir}/gwt_dragdrop/gwt-dnd-3.2.3.jar" />
    <pathelement location="${lib.dir}/gwt_incubator/gwt-incubator-20101117-r1766.jar" />
    <pathelement location="${lib.dir}/gwt_svg/lib-gwt-svg-0.5.15.jar" />
    <pathelement location="${lib.dir}/guava/guava-gwt-20.0.jar" />
    <pathelement location="${lib.dir}/json/json.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.13.2.jar" />
    <pathelement location="${lib.dir}/charba/charba-2.5.jar" />
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
    <!-- Paths to sources (needed by GWTTestCase) -->
    <pathelement location="${build.dir}/components/ComponentTranslation/src" />
    <pathelement location="src"/>
    <pathelement location="tests"/>
  </path>

  <path id="AiClientLibTests.path">
    <path refid="libsForAiClientLibTests.path"/>
    <path refid="libsForAiServerLibTests.path"/>
    <pathelement location="${local.build.dir}/AiSharedLib.jar" />
    <pathelement location="${local.build.dir}/AiClientLibTests.jar" />
  </path>

  <target name="AiClientLibTests"
          depends="AiClientLib,AiServerLib,common_CommonTestUtils,components_CommonConstants,common_CommonUtils"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="AiClientLibTests"
                aij-prod="true"
                aij-dir="${appinventor.pkg}/client" >
    </ai.dojunit>
  </target>

</project>
