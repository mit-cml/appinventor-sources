<?xml version="1.0"?>

<!-- ======================================================================
     Copyright 2011 Google Inc.  All Rights Reserved.
     Author: lizlooney@google.com (Liz Looney)

     App Inventor common libraries
     ====================================================================== -->

<project name="common" default="all">
  <description>
    App Inventor common libraries
  </description>

  <target name="all"
          depends="CommonUtils,CommonVersion">
  </target>

  <target name="tests"
          depends="CommonUtilsTests">
  </target>

  <!-- =====================================================================
       Import common directory, task, and target definitions.
       ===================================================================== -->
  <import file="../build-common.xml" />

  <!-- =====================================================================
       Define base package path.
       ===================================================================== -->
  <property name="common.pkg" value="com/google/appinventor/common" />

  <!-- =====================================================================
       CommonUtils: library containing utility classes.
       ===================================================================== -->
  <target name="CommonUtils"
          description="Generate library containing utility classes"
          depends="init">
    <property name="CommonUtils-class.dir" location="${class.dir}/CommonUtils" />
    <mkdir dir="${CommonUtils-class.dir}" />

    <ai.javac destdir="${CommonUtils-class.dir}">
      <include name="${common.pkg}/utils/*.java" />
      <classpath>
        <pathelement location="${lib.dir}/guava/guava-27.1-android.jar" />
      </classpath>
    </ai.javac>

    <jar destfile="${public.build.dir}/CommonUtils.jar">
      <fileset dir="${CommonUtils-class.dir}"/>
    </jar>

    <jar destfile="${public.build.dir}/CommonUtils-gwt.jar">
      <fileset dir="${CommonUtils-class.dir}"/>
      <fileset dir="${src.dir}">
        <include name="${common.pkg}/utils/*.java"/>
        <include name="${common.pkg}/CommonUtils.gwt.xml" />
      </fileset>
  </jar>

  </target>

  <!-- =====================================================================
       CommonUtilsTests: build and run the CommonUtils tests and generate the output results
       ===================================================================== -->

  <path id="libsForCommonUtilsTests.path">
    <pathelement location="${public.build.dir}/CommonUtils.jar" />
    <pathelement location="${lib.dir}/guava/guava-27.1-android.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.13.2.jar" />
  </path>

  <path id="CommonUtilsTests.path">
    <path refid="libsForCommonUtilsTests.path"/>
    <pathelement location="${local.build.dir}/CommonUtilsTests.jar" />
  </path>

  <target name="CommonUtilsTests"
          depends="CommonUtils"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="CommonUtilsTests"
                aij-dir="${common.pkg}/utils" >
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       CommonVersion: library containing version classes.
       ===================================================================== -->
  <target name="CommonVersion"
          description="Generate library containing version classes"
          depends="init">
    <property name="CommonVersion-class.dir" location="${class.dir}/CommonVersion" />
    <mkdir dir="${CommonVersion-class.dir}" />

    <!-- We extract two pieces of info from Git: the version and the fingerprint.
         The version is the tag that was set in the release process.  The fingerprint
         by Git.  We use the version or to check against the buildserver
         version.   We use the fingerprint only in the logs as an debugging aid. -->
    <exec executable="git" outputproperty="git.build.version">
        <arg line = "describe --dirty" />
    </exec>
    <filter token="git.build.version" value="${git.build.version}" />

    <exec executable="git" outputproperty="git.build.fingerprint">
        <arg line = "rev-parse HEAD " />
    </exec>
    <filter token="git.build.fingerprint" value="${git.build.fingerprint}" />

    <tstamp/>
    <property name="ant.build.date" value="${TODAY}" />
    <filter token="ant.build.date" value="${ant.build.date}" />

    <filter token="acra.uri" value="${acra.uri}" />

    <mkdir dir="${local.build.dir}/src/${common.pkg}/version/"/>
    <copy tofile="${local.build.dir}/src/${common.pkg}/version/GitBuildId.java" file="GitBuildId.template" filtering="true" />

    <ai.javac destdir="${CommonVersion-class.dir}" srcdir="${src.dir};${local.build.dir}/src">
      <include name="${common.pkg}/version/*.java" />
    </ai.javac>

    <jar destfile="${public.build.dir}/CommonVersion.jar">
      <fileset dir="${CommonVersion-class.dir}"/>
    </jar>

    <jar destfile="${public.build.dir}/CommonVersion-gwt.jar">
      <fileset dir="${CommonVersion-class.dir}"/>
      <fileset dir="${src.dir}">
        <include name="${common.pkg}/version/*.java"/>
        <include name="${common.pkg}/CommonVersion.gwt.xml" />
      </fileset>
      <fileset dir="${local.build.dir}/src">
        <include name="${common.pkg}/version/*.java"/>
      </fileset>
  </jar>

  </target>

  <!-- =====================================================================
       CommonTestUtils: library containing utility class for testing
       ===================================================================== -->
  <target name="CommonTestUtils"
          description="Generate library containing utility class for testing"
          depends="init">
    <property name="CommonTestUtils-class.dir" location="${class.dir}/CommonTestUtils" />
    <mkdir dir="${CommonTestUtils-class.dir}" />

    <ai.javac destdir="${CommonTestUtils-class.dir}">
      <include name="${common.pkg}/testutils/*.java" />
    </ai.javac>

    <jar destfile="${public.build.dir}/CommonTestUtils.jar">
      <fileset dir="${CommonTestUtils-class.dir}"/>
    </jar>

  </target>

</project>
