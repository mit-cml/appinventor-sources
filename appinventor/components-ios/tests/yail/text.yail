#|
$Source $Yail
|#

(define-form appinventor.ai_ewpatton.TextBlocksTest.Screen1 Screen1)
(require <com.google.youngandroid.runtime>)

(def (p$test_text ) (call-yail-primitive yail-equal? (*list-for-runtime* "foo" "foo") '(any any) "="))
(def (p$test_text_join ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive string-append (*list-for-runtime* "foo" "bar" ) '(text text ) "join") "foobar") '(any any) "="))
(def (p$test_text_length ) (call-yail-primitive yail-equal? (*list-for-runtime* 3 (call-yail-primitive string-length (*list-for-runtime* "foo") '(text) "length")) '(any any) "="))
(def (p$test_text_isEmpty ) (and-delayed (call-yail-primitive string-empty? (*list-for-runtime* "") '(text) "is text empty?") (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive string-empty? (*list-for-runtime* "not empty") '(text) "is text empty?")) '(boolean) "not")))
(def (p$test_text_compare ) (and-delayed (call-yail-primitive string<? (*list-for-runtime* "bar" "foo") '(text text) "text<") (and-delayed (call-yail-primitive string=? (*list-for-runtime* "foo" "foo") '(text text) "text=") (call-yail-primitive string>? (*list-for-runtime* "foo" "bar") '(text text) "text>"))))
(def (p$test_text_trim ) (call-yail-primitive yail-equal? (*list-for-runtime* "foo" (call-yail-primitive string-trim (*list-for-runtime* "\nfoo\n") '(text) "trim")) '(any any) "="))
(def (p$test_text_changeCase ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* "FOO" (call-yail-primitive string-to-upper-case (*list-for-runtime* "foo") '(text) "upcase")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* "foo" (call-yail-primitive string-to-lower-case (*list-for-runtime* "FOO") '(text) "downcase")) '(any any) "=")))
(def (p$test_text_starts_at ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 4 (call-yail-primitive string-starts-at (*list-for-runtime* "foobar" "bar") '(text text) "starts at")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive string-starts-at (*list-for-runtime* "foo" "bar") '(text text) "starts at")) '(any any) "=")))
(def (p$test_text_contains ) (and-delayed (call-yail-primitive string-contains (*list-for-runtime* "foobar" "bar") '(text text) "contains") (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive string-contains (*list-for-runtime* "foo" "bar") '(text text) "contains")) '(boolean) "not")))
(def (p$test_text_split ) (and-delayed (and-delayed (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive string-split (*list-for-runtime* "foo" "bar") '(text text) "split") ) '(list) "length of list")) '(any any) "=") (let ( ($parts (call-yail-primitive string-split (*list-for-runtime* "foobarbaz" "bar") '(text text) "split"))  ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 2 (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $parts) ) '(list) "length of list")) '(any any) "=") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* "foo" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 1) '(list number) "select list item")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* "baz" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 2) '(list number) "select list item")) '(any any) "="))) )) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive string-split-at-first (*list-for-runtime* "foo" "bar") '(text text) "split at first") ) '(list) "length of list")) '(any any) "=") (let ( ($parts (call-yail-primitive string-split-at-first (*list-for-runtime* "foobarbaz" "a") '(text text) "split at first"))  ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 2 (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $parts) ) '(list) "length of list")) '(any any) "=") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* "foob" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 1) '(list number) "select list item")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* "rbaz" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 2) '(list number) "select list item")) '(any any) "="))) ))) (and-delayed (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive string-split-at-any (*list-for-runtime* "foo" (call-yail-primitive make-yail-list (*list-for-runtime* "a" "bar" ) '(any any ) "make a list")) '(text list) "split at any") ) '(list) "length of list")) '(any any) "=") (let ( ($parts (call-yail-primitive string-split-at-any (*list-for-runtime* "foobarbaz" (call-yail-primitive make-yail-list (*list-for-runtime* "a" "bar" ) '(any any ) "make a list")) '(text list) "split at any"))  ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 3 (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $parts) ) '(list) "length of list")) '(any any) "=") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* "foo" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 1) '(list number) "select list item")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* "b" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 2) '(list number) "select list item")) '(any any) "="))) )) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive string-split-at-any (*list-for-runtime* "foo" (call-yail-primitive make-yail-list (*list-for-runtime* "a" "bar" ) '(any any ) "make a list")) '(text list) "split at any") ) '(list) "length of list")) '(any any) "=") (let ( ($parts (call-yail-primitive string-split-at-first-of-any (*list-for-runtime* "foobarbaz" (call-yail-primitive make-yail-list (*list-for-runtime* "a" "bar" ) '(any any ) "make a list")) '(text list) "split at first of any"))  ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 2 (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $parts) ) '(list) "length of list")) '(any any) "=") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* "foo" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 1) '(list number) "select list item")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* "baz" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 2) '(list number) "select list item")) '(any any) "="))) )))))
(def (p$test_text_split_at_spaces ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive string-split-at-spaces (*list-for-runtime* "foo") '(text) "split at spaces") ) '(list) "length of list")) '(any any) "=") (let ( ($parts (call-yail-primitive string-split-at-spaces (*list-for-runtime* "foo bar") '(text) "split at spaces"))  ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 2 (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $parts) ) '(list) "length of list")) '(any any) "=") (and-delayed (call-yail-primitive string=? (*list-for-runtime* "foo" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 1) '(list number) "select list item")) '(text text) "text=") (call-yail-primitive string=? (*list-for-runtime* "bar" (call-yail-primitive yail-list-get-item (*list-for-runtime* (lexical-value $parts) 2) '(list number) "select list item")) '(text text) "text="))) )))
(def (p$test_text_segment ) (call-yail-primitive string=? (*list-for-runtime* "bar" (call-yail-primitive string-substring (*list-for-runtime* "foobarbaz" 4 3) '(text number number) "segment")) '(text text) "text="))
(def (p$test_text_replace_all ) (and-delayed (call-yail-primitive string=? (*list-for-runtime* "foo" (call-yail-primitive string-replace-all (*list-for-runtime* "foo" "bar" "baz") '(text text text) "replace all")) '(text text) "text=") (call-yail-primitive string=? (*list-for-runtime* "foobazfoobaz" (call-yail-primitive string-replace-all (*list-for-runtime* "foobarfoobar" "bar" "baz") '(text text text) "replace all")) '(text text) "text=")))
(def (p$test_obfuscated_text ) (call-yail-primitive string=? (*list-for-runtime* "foo" (call-yail-primitive text-deobfuscate (*list-for-runtime* "\u0000\u0001\u0017" "elyquspj") '(text text) "deobfuscate text")) '(text text) "text="))
(def (p$test_text_is_string ) (and-delayed (call-yail-primitive string? (*list-for-runtime* "foo" ) '(any) "is a string?") (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive string? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") ) '(any) "is a string?")) '(boolean) "not")))
;;; Screen1
#|
(do-after-form-creation (set-and-coerce-property! 'Screen1 'AppName "TextBlocksTest" 'text)
 (set-and-coerce-property! 'Screen1 'Title "Screen1" 'text)
)

(init-runtime)
|#
