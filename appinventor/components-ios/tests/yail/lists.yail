#|
$Source $Yail
|#

(define-form appinventor.ai_ewpatton.ListBlocksTest.Screen1 Screen1)
(require <com.google.youngandroid.runtime>)

(def (p$test_lists_create_with ) (begin   (begin (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") "ignored") #t))
(def (p$test_lists_create_with2 ) (begin   (begin (call-yail-primitive make-yail-list (*list-for-runtime* 0 0 ) '(any any ) "make a list") "ignored") #t))
(def (p$test_lists_add_items ) (begin   (call-yail-primitive yail-list-add-to-list! (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") 0 ) '(list any ) "add items to list") #t))
(def (p$test_lists_is_in ) (and-delayed (call-yail-primitive yail-list-member? (*list-for-runtime* 0 (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list")) '(any list) "is in list?") (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-list-member? (*list-for-runtime* 0 (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list")) '(any list) "is in list?")) '(boolean) "not")))
(def (p$test_lists_length ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 2 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list") ) '(list) "length of list")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive yail-list-length (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") ) '(list) "length of list")) '(any any) "=")))
(def (p$test_lists_is_empty ) (and-delayed (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-list-empty? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list") ) '(list) "is list empty?")) '(boolean) "not") (call-yail-primitive yail-list-empty? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") ) '(list) "is list empty?")))
(def (p$test_lists_pick_random_item ) (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive yail-list-pick-random (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 0 ) '(any ) "make a list") ) '(list) "pick random item")) '(any any) "="))
(def (p$test_lists_position_in ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-list-index (*list-for-runtime* 0 (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list")) '(any list) "index in list")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive yail-list-index (*list-for-runtime* 0 (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list")) '(any list) "index in list")) '(any any) "=")))
(def (p$test_lists_select_item ) (call-yail-primitive yail-list-get-item (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* #f #t ) '(any any ) "make a list") 2) '(list number) "select list item"))
(def (p$test_lists_insert_item ) (let ( ($name (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list"))  ) (begin   (call-yail-primitive yail-list-insert-item! (*list-for-runtime* (lexical-value $name) 2 2) '(list number any) "insert list item") (call-yail-primitive yail-equal? (*list-for-runtime* (lexical-value $name) (call-yail-primitive make-yail-list (*list-for-runtime* 0 2 1 ) '(any any any ) "make a list")) '(any any) "=")) ))
(def (p$test_lists_replace_item ) (let ( ($name (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list"))  ) (begin   (call-yail-primitive yail-list-set-item! (*list-for-runtime* (lexical-value $name) 2 2) '(list number any) "replace list item") (call-yail-primitive yail-equal? (*list-for-runtime* (lexical-value $name) (call-yail-primitive make-yail-list (*list-for-runtime* 0 2 ) '(any any ) "make a list")) '(any any) "=")) ))
(def (p$test_lists_remove_item ) (let ( ($name (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list"))  ) (begin   (call-yail-primitive yail-list-remove-item! (*list-for-runtime* (lexical-value $name) 2) '(list number) "remove list item") (call-yail-primitive yail-equal? (*list-for-runtime* (lexical-value $name) (call-yail-primitive make-yail-list (*list-for-runtime* 0 ) '(any ) "make a list")) '(any any) "=")) ))
(def (p$test_lists_append_list ) (let ( ($name (call-yail-primitive make-yail-list (*list-for-runtime* 0 ) '(any ) "make a list"))  ) (begin   (call-yail-primitive yail-list-append! (*list-for-runtime* (lexical-value $name) (call-yail-primitive make-yail-list (*list-for-runtime* 1 ) '(any ) "make a list")) '(list list) "append to list") (call-yail-primitive yail-equal? (*list-for-runtime* (lexical-value $name) (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list")) '(any any) "=")) ))
(def (p$test_lists_copy ) (let ( ($name (call-yail-primitive make-yail-list (*list-for-runtime* 0 ) '(any ) "make a list")) ($x #f)  ) (begin   (set-lexical! $x (call-yail-primitive yail-list-copy (*list-for-runtime* (lexical-value $name) ) '(list) "copy list"))(call-yail-primitive yail-list-set-item! (*list-for-runtime* (lexical-value $name) 1 1) '(list number any) "replace list item") (call-yail-primitive yail-not-equal? (*list-for-runtime* (lexical-value $name) (lexical-value $x)) '(any any) "=")) ))
(def (p$test_lists_is_list ) (and-delayed (call-yail-primitive yail-list? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") ) '(any) "is a list?") (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-list? (*list-for-runtime* 0 ) '(any) "is a list?")) '(boolean) "not")))
(def (p$test_lists_to_csv_row ) (call-yail-primitive string=? (*list-for-runtime* "\"test\",\"\"\"with quotes\"\"\",\"row\"" (call-yail-primitive yail-list-to-csv-row (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "test" "\"with quotes\"" "row" ) '(any any any ) "make a list") ) '(list) "list to csv row")) '(text text) "text="))
(def (p$test_lists_to_csv_table ) (call-yail-primitive string=? (*list-for-runtime* "\"h1\",\"h2\"\r\n\"0\",\"1\"\r\n" (call-yail-primitive yail-list-to-csv-table (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "h1" "h2" ) '(any any ) "make a list") (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list") ) '(any any ) "make a list") ) '(list) "list to csv table")) '(text text) "text="))
(def (p$test_lists_from_csv_row ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "test" "\"with quotes\"" "row" ) '(any any any ) "make a list") (call-yail-primitive yail-list-from-csv-row (*list-for-runtime* "\"test\",\"\"\"with quotes\"\"\",\"row\"" ) '(text) "list from csv row")) '(any any) "="))
(def (p$test_lists_from_csv_table ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "h1" "h2" ) '(any any ) "make a list") (call-yail-primitive make-yail-list (*list-for-runtime* 0 1 ) '(any any ) "make a list") ) '(any any ) "make a list") (call-yail-primitive yail-list-from-csv-table (*list-for-runtime* "\"h1\",\"h2\"\r\n\"0\",\"1\"\r\n" ) '(text) "list from csv table")) '(any any) "="))
(def (p$test_lists_lookup_in_pairs ) (and-delayed (call-yail-primitive string=? (*list-for-runtime* "bar" (call-yail-primitive yail-alist-lookup (*list-for-runtime* "foo" (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "foo" "bar" ) '(any any ) "make a list") ) '(any ) "make a list") #f) '(any list any)  "lookup in pairs")) '(text text) "text=") (call-yail-primitive yail-alist-lookup (*list-for-runtime* "foo" (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") #t) '(any list any)  "lookup in pairs")))
(def (p$test_lists_reverse ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* #t 0 "false" ) '(any any any ) "make a list") (call-yail-primitive yail-list-reverse (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "false" 0 #t ) '(any any any ) "make a list") ) '(list) "reverse list")) '(any any) "="))
(def (p$test_lists_join_with_separator ) (call-yail-primitive yail-equal? (*list-for-runtime* "a,b,c" (call-yail-primitive yail-list-join-with-separator (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "a" "b" "c" ) '(any any any ) "make a list") ",") '(list text) "join with separator")) '(any any) "="))
(def (p$test_lists_map ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 1 4 9 ) '(any any any ) "make a list") (map_nondest $item (call-yail-primitive * (*list-for-runtime* (lexical-value $item) (lexical-value $item) ) '(number number ) "*") (call-yail-primitive make-yail-list (*list-for-runtime* 1 2 3 ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_filter ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 2 ) '(any ) "make a list") (filter_nondest $item (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive modulo (*list-for-runtime* (lexical-value $item) 2) '(number number) "modulo")) '(any any) "=") (call-yail-primitive make-yail-list (*list-for-runtime* 1 2 3 ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_reduce ) (call-yail-primitive yail-equal? (*list-for-runtime* 6 (reduceovereach 0 $answerSoFar $item (call-yail-primitive + (*list-for-runtime* (lexical-value $item) (lexical-value $answerSoFar) ) '(number number ) "+") (call-yail-primitive make-yail-list (*list-for-runtime* 1 2 3 ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_sort ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* #t 0 "false" ) '(any any any ) "make a list") (call-yail-primitive yail-list-sort (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "false" 0 #t ) '(any any any ) "make a list") ) '(list) "sort ")) '(any any) "="))
(def (p$test_lists_sort_comparator ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 3 2 1 ) '(any any any ) "make a list") (sortcomparator_nondest $item1 $item2 (call-yail-primitive > (*list-for-runtime* (lexical-value $item1) (lexical-value $item2)) '(number number) ">") (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 3 ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_sort_key ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "value" 1 ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "value" 2 ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "value" 3 ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") ) '(any any any ) "make a list") (sortkey_nondest $item (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "value" (lexical-value $item) "not found") '(key any any)  "dictionary lookup") (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "value" 2 ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "value" 1 ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "value" 3 ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_minimum_value ) (call-yail-primitive yail-equal? (*list-for-runtime* 1 (mincomparator-nondest $item1 $item2 (call-yail-primitive < (*list-for-runtime* (lexical-value $item1) (lexical-value $item2)) '(number number) "<") (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 3 ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_maximum_value ) (call-yail-primitive yail-equal? (*list-for-runtime* 3 (maxcomparator-nondest $item1 $item2 (call-yail-primitive < (*list-for-runtime* (lexical-value $item1) (lexical-value $item2)) '(number number) "<") (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 3 ) '(any any any ) "make a list"))) '(any any) "="))
(def (p$test_lists_but_first ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 1 3 ) '(any any ) "make a list") (call-yail-primitive yail-list-but-first (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 3 ) '(any any any ) "make a list") ) '(list) "butFirst of list")) '(any any) "="))
(def (p$test_lists_but_last ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 ) '(any any ) "make a list") (call-yail-primitive yail-list-but-last (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 3 ) '(any any any ) "make a list") ) '(list) "butLast of list")) '(any any) "="))
(def (p$test_lists_slice ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 1 ) '(any ) "make a list") (call-yail-primitive yail-list-slice (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* 2 1 3 ) '(any any any ) "make a list") 2 3) '(list number number) "slice of list")) '(any any) "="))
;;; Screen1
#|
(do-after-form-creation (set-and-coerce-property! 'Screen1 'AppName "ListBlocksTest" 'text)
 (set-and-coerce-property! 'Screen1 'Title "Screen1" 'text)
)

(init-runtime)
|#
