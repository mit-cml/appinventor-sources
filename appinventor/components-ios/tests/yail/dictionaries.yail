#|
$Source $Yail
|#

(define-form appinventor.ai_ewpatton.DictionaryBlocksTest.Screen1 Screen1)
(require <com.google.youngandroid.runtime>)

(def (p$test_dictionaries_create_with ) (begin   (begin (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "strkey" #t ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* 0 (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* (get-component Screen1) (call-yail-primitive make-yail-dictionary (*list-for-runtime* ) '() "make a dictionary") ) '(key any)  "make a pair") ) '(pair pair pair ) "make a dictionary") "ignored") #t))
(def (p$test_pair ) (begin   (begin (call-yail-primitive make-dictionary-pair (*list-for-runtime* "strkey" #t ) '(key any)  "make a pair") "ignored") #t))
(def (p$test_dictionaries_lookup ) (and-delayed (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "passed" (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "passed" #t ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") "not found") '(key any any)  "dictionary lookup") (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "passed" (call-yail-primitive make-yail-dictionary (*list-for-runtime* ) '() "make a dictionary") "not found") '(key any any)  "dictionary lookup") "not found") '(any any) "=")))
(def (p$test_dictionaries_set_pair ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* ) '() "make a dictionary"))  ) (begin   (call-yail-primitive yail-dictionary-set-pair (*list-for-runtime* "passed" (lexical-value $dict) #t) '(key dictionary any)  "set value for key in dictionary to value") (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "passed" (lexical-value $dict) #f) '(key any any)  "dictionary lookup")) ))
(def (p$test_dictionaries_delete_pair ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "passed" #f ) '(key any)  "make a pair") ) '(pair ) "make a dictionary"))  ) (begin   (call-yail-primitive yail-dictionary-delete-pair (*list-for-runtime* (lexical-value $dict) "passed") '(dictionary key)  "delete dictionary pair") (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "passed" (lexical-value $dict) #t) '(key any any)  "dictionary lookup")) ))
(def (p$test_dictionaries_recursive_lookup ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" (call-yail-primitive make-yail-list (*list-for-runtime* "bad" (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* 5 "bad" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "success" #t ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(any any ) "make a list") ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" #f ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary"))  ) (and-delayed (call-yail-primitive yail-dictionary-recursive-lookup (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "first" 2 "success" ) '(any any any ) "make a list") (lexical-value $dict) #f) '(list dictionary any)  "dictionary recursive lookup") (call-yail-primitive yail-dictionary-recursive-lookup (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "second" 2 "success" ) '(any any any ) "make a list") (lexical-value $dict) #t) '(list dictionary any)  "dictionary recursive lookup")) ))
(def (p$test_dictionaries_recursive_set ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "bad" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" (call-yail-primitive make-yail-list (*list-for-runtime* #f (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "John" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "last" "Smith" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(any any ) "make a list") ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary"))  ) (begin   (call-yail-primitive yail-dictionary-recursive-set (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "second" 2 "first" ) '(any any any ) "make a list") (lexical-value $dict) "Jane") '(list dictionary any)  "dictionary recursive set") (call-yail-primitive yail-equal? (*list-for-runtime* (lexical-value $dict) (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "bad" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" (call-yail-primitive make-yail-list (*list-for-runtime* #f (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "Jane" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "last" "Smith" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(any any ) "make a list") ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary")) '(any any) "=")) ))
(def (p$test_dictionaries_getters ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive yail-dictionary-get-keys (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #t ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" #f ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary")) '(dictionary) "get a dictionary's keys") (call-yail-primitive make-yail-list (*list-for-runtime* "first" "second" ) '(any any ) "make a list")) '(any any) "="))
(def (p$test_dictionaries_get_values ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive yail-dictionary-get-values (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #t ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" #f ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary")) '(dictionary) "get a dictionary's values") (call-yail-primitive make-yail-list (*list-for-runtime* #t #f ) '(any any ) "make a list")) '(any any) "="))
(def (p$test_dictionaries_is_key_in ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #t ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" #f ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary"))  ) (and-delayed (call-yail-primitive yail-dictionary-is-key-in (*list-for-runtime* "first" (lexical-value $dict) ) '(key dictionary)  "is key in dict?") (and-delayed (call-yail-primitive yail-dictionary-is-key-in (*list-for-runtime* "second" (lexical-value $dict) ) '(key dictionary)  "is key in dict?") (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-dictionary-is-key-in (*list-for-runtime* "third" (lexical-value $dict) ) '(key dictionary)  "is key in dict?")) '(boolean) "not"))) ))
(def (p$test_dictionaries_length ) (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive yail-dictionary-length (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* ) '() "make a dictionary") ) '(dictionary)  "get a dictionary's length")) '(any any) "=") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* 1 (call-yail-primitive yail-dictionary-length (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #t ) '(key any)  "make a pair") ) '(pair ) "make a dictionary") ) '(dictionary)  "get a dictionary's length")) '(any any) "=") (call-yail-primitive yail-equal? (*list-for-runtime* 2 (call-yail-primitive yail-dictionary-length (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #t ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" #f ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(dictionary)  "get a dictionary's length")) '(any any) "="))))
(def (p$test_dictionaries_alist_to_dict ) (let ( ($alist (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "first" (call-yail-primitive make-yail-list (*list-for-runtime* "test" 0 ) '(any any ) "make a list") ) '(any any ) "make a list") (call-yail-primitive make-yail-list (*list-for-runtime* "second" #t ) '(any any ) "make a list") ) '(any any ) "make a list")) ($dict #f)  ) (begin   (set-lexical! $dict (call-yail-primitive yail-dictionary-alist-to-dict (*list-for-runtime* (lexical-value $alist) ) '(list)  "convert an alist to a dictionary")) (and-delayed (call-yail-primitive yail-dictionary? (*list-for-runtime* (lexical-value $dict) ) '(any)  "check if something is a dictionary") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive yail-dictionary-length (*list-for-runtime* (lexical-value $dict) ) '(dictionary)  "get a dictionary's length") (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $alist) ) '(list) "length of list")) '(any any) "=") (and-delayed (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "second" (lexical-value $dict) #f) '(key any any)  "dictionary lookup") (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive yail-list-get-item (*list-for-runtime* (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "first" (lexical-value $dict) "not found") '(key any any)  "dictionary lookup") 2) '(list number) "select list item")) '(any any) "="))))) ))
(def (p$test_dictionaries_dict_to_alist ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" (call-yail-primitive make-yail-list (*list-for-runtime* "test" 0 ) '(any any ) "make a list") ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" #t ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary")) ($alist #f)  ) (begin   (set-lexical! $alist (call-yail-primitive yail-dictionary-dict-to-alist (*list-for-runtime* (lexical-value $dict) ) '(dictionary)  "convert a dictionary to an alist")) (and-delayed (call-yail-primitive yail-list? (*list-for-runtime* (lexical-value $alist) ) '(any) "is a list?") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive yail-list-length (*list-for-runtime* (lexical-value $alist) ) '(list) "length of list") (call-yail-primitive yail-dictionary-length (*list-for-runtime* (lexical-value $dict) ) '(dictionary)  "get a dictionary's length")) '(any any) "=") (and-delayed (call-yail-primitive yail-alist-lookup (*list-for-runtime* "second" (lexical-value $alist) "not found") '(any list any)  "lookup in pairs") (call-yail-primitive yail-equal? (*list-for-runtime* 0 (call-yail-primitive yail-list-get-item (*list-for-runtime* (call-yail-primitive yail-alist-lookup (*list-for-runtime* "first" (lexical-value $alist) #f) '(any list any)  "lookup in pairs") 2) '(list number) "select list item")) '(any any) "="))))) ))
(def (p$test_dictionaries_copy ) (let ( ($dict1 (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "same" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" 0 ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary")) ($dict2 (call-yail-primitive make-yail-dictionary (*list-for-runtime* ) '() "make a dictionary"))  ) (begin   (set-lexical! $dict2 (call-yail-primitive yail-dictionary-copy (*list-for-runtime* (lexical-value $dict1) ) '(dictionary)  "get a shallow copy of a dict"))(call-yail-primitive yail-dictionary-set-pair (*list-for-runtime* "first" (lexical-value $dict2) "different") '(key dictionary any)  "set value for key in dictionary to value") (and-delayed (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive yail-dictionary-copy (*list-for-runtime* (lexical-value $dict1) ) '(dictionary)  "get a shallow copy of a dict") (lexical-value $dict1)) '(any any) "=") (call-yail-primitive yail-not-equal? (*list-for-runtime* (lexical-value $dict2) (lexical-value $dict1)) '(any any) "="))) ))
(def (p$test_dictionaries_combine_dicts ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "a" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" "b" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary"))  ) (begin   (call-yail-primitive yail-dictionary-combine-dicts (*list-for-runtime* (lexical-value $dict) (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" 2 ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "third" 3 ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(dictionary dictionary)  "combine 2 dictionaries") (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "a" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" 2 ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "third" 3 ) '(key any)  "make a pair") ) '(pair pair pair ) "make a dictionary") (lexical-value $dict)) '(any any) "=")) ))
(def (p$test_dictionaries_walk_tree ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #f ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "Alice" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "last" "Smith" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "Bob" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "last" "Jones" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(any any ) "make a list") ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary"))  ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "Alice" ) '(any ) "make a list") (call-yail-primitive yail-dictionary-walk (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "second" 1 "first" ) '(any any any ) "make a list") (lexical-value $dict) ) '(list any) "list by walking key path in dictionary")) '(any any) "=") ))
(def (p$test_dictionaries_walk_all ) (let ( ($dict (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" #f ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "second" (call-yail-primitive make-yail-list (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "Alice" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "last" "Smith" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") (call-yail-primitive make-yail-dictionary (*list-for-runtime* (call-yail-primitive make-dictionary-pair (*list-for-runtime* "first" "Bob" ) '(key any)  "make a pair") (call-yail-primitive make-dictionary-pair (*list-for-runtime* "last" "Jones" ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary") ) '(any any ) "make a list") ) '(key any)  "make a pair") ) '(pair pair ) "make a dictionary"))  ) (call-yail-primitive yail-equal? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "Alice" "Bob" ) '(any any ) "make a list") (call-yail-primitive yail-dictionary-walk (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* "second" (static-field com.google.appinventor.components.runtime.util.YailDictionary 'ALL) "first" ) '(any any any ) "make a list") (lexical-value $dict) ) '(list any) "list by walking key path in dictionary")) '(any any) "=") ))
(def (p$test_dictionaries_is_dict ) (and-delayed (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-dictionary? (*list-for-runtime* #f ) '(any)  "check if something is a dictionary")) '(boolean) "not") (and-delayed (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-dictionary? (*list-for-runtime* 0 ) '(any)  "check if something is a dictionary")) '(boolean) "not") (and-delayed (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-dictionary? (*list-for-runtime* "" ) '(any)  "check if something is a dictionary")) '(boolean) "not") (and-delayed (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-dictionary? (*list-for-runtime* (call-yail-primitive make-yail-list (*list-for-runtime* ) '() "make a list") ) '(any)  "check if something is a dictionary")) '(boolean) "not") (call-yail-primitive yail-dictionary? (*list-for-runtime* (call-yail-primitive make-yail-dictionary (*list-for-runtime* ) '() "make a dictionary") ) '(any)  "check if something is a dictionary"))))))
;;; Screen1
#|
(do-after-form-creation (set-and-coerce-property! 'Screen1 'AppName "DictionaryBlocksTest" 'text)
 (set-and-coerce-property! 'Screen1 'Title "Screen1" 'text)
)

(init-runtime)
|#
