// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: chat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// NOTE WELL!!! This file must define the same structures as the version
/// in the components hierarchy

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ChatBot_unsigned {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// obfuscated userId of requestor
  public var huuid: String {
    get {return _huuid ?? String()}
    set {_huuid = newValue}
  }
  /// Returns true if `huuid` has been explicitly set.
  public var hasHuuid: Bool {return self._huuid != nil}
  /// Clears the value of `huuid`. Subsequent reads from it will return its default value.
  public mutating func clearHuuid() {self._huuid = nil}

  /// incremented in case of previous revoked
  public var version: UInt64 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var generation: UInt64 {
    get {return _generation ?? 0}
    set {_generation = newValue}
  }
  /// Returns true if `generation` has been explicitly set.
  public var hasGeneration: Bool {return self._generation != nil}
  /// Clears the value of `generation`. Subsequent reads from it will return its default value.
  public mutating func clearGeneration() {self._generation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _huuid: String? = nil
  fileprivate var _version: UInt64? = nil
  fileprivate var _generation: UInt64? = nil
}

public struct ChatBot_token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var keyid: UInt64 {
    get {return _keyid ?? 1}
    set {_keyid = newValue}
  }
  /// Returns true if `keyid` has been explicitly set.
  public var hasKeyid: Bool {return self._keyid != nil}
  /// Clears the value of `keyid`. Subsequent reads from it will return its default value.
  public mutating func clearKeyid() {self._keyid = nil}

  public var generation: UInt64 {
    get {return _generation ?? 0}
    set {_generation = newValue}
  }
  /// Returns true if `generation` has been explicitly set.
  public var hasGeneration: Bool {return self._generation != nil}
  /// Clears the value of `generation`. Subsequent reads from it will return its default value.
  public mutating func clearGeneration() {self._generation = nil}

  public var unsigned: Data {
    get {return _unsigned ?? Data()}
    set {_unsigned = newValue}
  }
  /// Returns true if `unsigned` has been explicitly set.
  public var hasUnsigned: Bool {return self._unsigned != nil}
  /// Clears the value of `unsigned`. Subsequent reads from it will return its default value.
  public mutating func clearUnsigned() {self._unsigned = nil}

  public var signature: Data {
    get {return _signature ?? Data()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _keyid: UInt64? = nil
  fileprivate var _generation: UInt64? = nil
  fileprivate var _unsigned: Data? = nil
  fileprivate var _signature: Data? = nil
}

public struct ChatBot_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var token: ChatBot_token {
    get {return _token ?? ChatBot_token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  public var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  public mutating func clearUuid() {self._uuid = nil}

  public var question: String {
    get {return _question ?? String()}
    set {_question = newValue}
  }
  /// Returns true if `question` has been explicitly set.
  public var hasQuestion: Bool {return self._question != nil}
  /// Clears the value of `question`. Subsequent reads from it will return its default value.
  public mutating func clearQuestion() {self._question = nil}

  public var system: String {
    get {return _system ?? String()}
    set {_system = newValue}
  }
  /// Returns true if `system` has been explicitly set.
  public var hasSystem: Bool {return self._system != nil}
  /// Clears the value of `system`. Subsequent reads from it will return its default value.
  public mutating func clearSystem() {self._system = nil}

  public var apikey: String {
    get {return _apikey ?? String()}
    set {_apikey = newValue}
  }
  /// Returns true if `apikey` has been explicitly set.
  public var hasApikey: Bool {return self._apikey != nil}
  /// Clears the value of `apikey`. Subsequent reads from it will return its default value.
  public mutating func clearApikey() {self._apikey = nil}

  public var provider: String {
    get {return _provider ?? "chatgpt"}
    set {_provider = newValue}
  }
  /// Returns true if `provider` has been explicitly set.
  public var hasProvider: Bool {return self._provider != nil}
  /// Clears the value of `provider`. Subsequent reads from it will return its default value.
  public mutating func clearProvider() {self._provider = nil}

  public var model: String {
    get {return _model ?? String()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {self._model = nil}

  public var inputimage: Data {
    get {return _inputimage ?? Data()}
    set {_inputimage = newValue}
  }
  /// Returns true if `inputimage` has been explicitly set.
  public var hasInputimage: Bool {return self._inputimage != nil}
  /// Clears the value of `inputimage`. Subsequent reads from it will return its default value.
  public mutating func clearInputimage() {self._inputimage = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _token: ChatBot_token? = nil
  fileprivate var _uuid: String? = nil
  fileprivate var _question: String? = nil
  fileprivate var _system: String? = nil
  fileprivate var _apikey: String? = nil
  fileprivate var _provider: String? = nil
  fileprivate var _model: String? = nil
  fileprivate var _inputimage: Data? = nil
}

public struct ChatBot_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  /// 0 = success, otherwise error code
  public var status: UInt64 {
    get {return _status ?? 0}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  public var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  public mutating func clearUuid() {self._uuid = nil}

  public var answer: String {
    get {return _answer ?? String()}
    set {_answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  public var hasAnswer: Bool {return self._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  public mutating func clearAnswer() {self._answer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _status: UInt64? = nil
  fileprivate var _uuid: String? = nil
  fileprivate var _answer: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ChatBot_unsigned: @unchecked Sendable {}
extension ChatBot_token: @unchecked Sendable {}
extension ChatBot_request: @unchecked Sendable {}
extension ChatBot_response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ChatBot"

extension ChatBot_unsigned: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".unsigned"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "huuid"),
    2: .same(proto: "version"),
    3: .same(proto: "generation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._huuid) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._generation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._huuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generation {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChatBot_unsigned, rhs: ChatBot_unsigned) -> Bool {
    if lhs._huuid != rhs._huuid {return false}
    if lhs._version != rhs._version {return false}
    if lhs._generation != rhs._generation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatBot_token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "keyid"),
    3: .same(proto: "generation"),
    4: .same(proto: "unsigned"),
    5: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._keyid) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._generation) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._unsigned) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._keyid {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generation {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._unsigned {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChatBot_token, rhs: ChatBot_token) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._keyid != rhs._keyid {return false}
    if lhs._generation != rhs._generation {return false}
    if lhs._unsigned != rhs._unsigned {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatBot_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "token"),
    3: .same(proto: "uuid"),
    4: .same(proto: "question"),
    5: .same(proto: "system"),
    6: .same(proto: "apikey"),
    7: .same(proto: "provider"),
    8: .same(proto: "model"),
    9: .same(proto: "inputimage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._uuid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._question) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._system) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._apikey) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._provider) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._model) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self._inputimage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._question {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._system {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._apikey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._provider {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._inputimage {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChatBot_request, rhs: ChatBot_request) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._token != rhs._token {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs._question != rhs._question {return false}
    if lhs._system != rhs._system {return false}
    if lhs._apikey != rhs._apikey {return false}
    if lhs._provider != rhs._provider {return false}
    if lhs._model != rhs._model {return false}
    if lhs._inputimage != rhs._inputimage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatBot_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "status"),
    3: .same(proto: "uuid"),
    4: .same(proto: "answer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._uuid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._answer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._answer {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChatBot_response, rhs: ChatBot_response) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._status != rhs._status {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs._answer != rhs._answer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
