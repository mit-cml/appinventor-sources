// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: image.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// NOTE WELL!!! This file must define the same structures as the version
/// in the components hierarchy

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ImageBot_unsigned {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// obfuscated userId of requestor
  public var huuid: String {
    get {return _huuid ?? String()}
    set {_huuid = newValue}
  }
  /// Returns true if `huuid` has been explicitly set.
  public var hasHuuid: Bool {return self._huuid != nil}
  /// Clears the value of `huuid`. Subsequent reads from it will return its default value.
  public mutating func clearHuuid() {self._huuid = nil}

  /// incremented in case of previous revoked
  public var version: UInt64 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var generation: UInt64 {
    get {return _generation ?? 0}
    set {_generation = newValue}
  }
  /// Returns true if `generation` has been explicitly set.
  public var hasGeneration: Bool {return self._generation != nil}
  /// Clears the value of `generation`. Subsequent reads from it will return its default value.
  public mutating func clearGeneration() {self._generation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _huuid: String? = nil
  fileprivate var _version: UInt64? = nil
  fileprivate var _generation: UInt64? = nil
}

public struct ImageBot_token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var keyid: UInt64 {
    get {return _keyid ?? 1}
    set {_keyid = newValue}
  }
  /// Returns true if `keyid` has been explicitly set.
  public var hasKeyid: Bool {return self._keyid != nil}
  /// Clears the value of `keyid`. Subsequent reads from it will return its default value.
  public mutating func clearKeyid() {self._keyid = nil}

  public var generation: UInt64 {
    get {return _generation ?? 0}
    set {_generation = newValue}
  }
  /// Returns true if `generation` has been explicitly set.
  public var hasGeneration: Bool {return self._generation != nil}
  /// Clears the value of `generation`. Subsequent reads from it will return its default value.
  public mutating func clearGeneration() {self._generation = nil}

  public var unsigned: Data {
    get {return _unsigned ?? Data()}
    set {_unsigned = newValue}
  }
  /// Returns true if `unsigned` has been explicitly set.
  public var hasUnsigned: Bool {return self._unsigned != nil}
  /// Clears the value of `unsigned`. Subsequent reads from it will return its default value.
  public mutating func clearUnsigned() {self._unsigned = nil}

  public var signature: Data {
    get {return _signature ?? Data()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _keyid: UInt64? = nil
  fileprivate var _generation: UInt64? = nil
  fileprivate var _unsigned: Data? = nil
  fileprivate var _signature: Data? = nil
}

public struct ImageBot_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var operation: ImageBot_request.OperationType {
    get {return _operation ?? .create}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  public var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  public mutating func clearOperation() {self._operation = nil}

  public var token: ImageBot_token {
    get {return _token ?? ImageBot_token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var prompt: String {
    get {return _prompt ?? String()}
    set {_prompt = newValue}
  }
  /// Returns true if `prompt` has been explicitly set.
  public var hasPrompt: Bool {return self._prompt != nil}
  /// Clears the value of `prompt`. Subsequent reads from it will return its default value.
  public mutating func clearPrompt() {self._prompt = nil}

  public var source: Data {
    get {return _source ?? Data()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  public var mask: Data {
    get {return _mask ?? Data()}
    set {_mask = newValue}
  }
  /// Returns true if `mask` has been explicitly set.
  public var hasMask: Bool {return self._mask != nil}
  /// Clears the value of `mask`. Subsequent reads from it will return its default value.
  public mutating func clearMask() {self._mask = nil}

  public var apikey: String {
    get {return _apikey ?? String()}
    set {_apikey = newValue}
  }
  /// Returns true if `apikey` has been explicitly set.
  public var hasApikey: Bool {return self._apikey != nil}
  /// Clears the value of `apikey`. Subsequent reads from it will return its default value.
  public mutating func clearApikey() {self._apikey = nil}

  public var size: String {
    get {return _size ?? String()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OperationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case create // = 0
    case edit // = 1

    public init() {
      self = .create
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .create
      case 1: self = .edit
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .create: return 0
      case .edit: return 1
      }
    }

  }

  public init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _operation: ImageBot_request.OperationType? = nil
  fileprivate var _token: ImageBot_token? = nil
  fileprivate var _prompt: String? = nil
  fileprivate var _source: Data? = nil
  fileprivate var _mask: Data? = nil
  fileprivate var _apikey: String? = nil
  fileprivate var _size: String? = nil
}

#if swift(>=4.2)

extension ImageBot_request.OperationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct ImageBot_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  /// 0 = success, otherwise error code
  public var status: UInt64 {
    get {return _status ?? 0}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var image: Data {
    get {return _image ?? Data()}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  public var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  public mutating func clearImage() {self._image = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _status: UInt64? = nil
  fileprivate var _image: Data? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ImageBot_unsigned: @unchecked Sendable {}
extension ImageBot_token: @unchecked Sendable {}
extension ImageBot_request: @unchecked Sendable {}
extension ImageBot_request.OperationType: @unchecked Sendable {}
extension ImageBot_response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ImageBot"

extension ImageBot_unsigned: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".unsigned"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "huuid"),
    2: .same(proto: "version"),
    3: .same(proto: "generation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._huuid) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._generation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._huuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generation {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ImageBot_unsigned, rhs: ImageBot_unsigned) -> Bool {
    if lhs._huuid != rhs._huuid {return false}
    if lhs._version != rhs._version {return false}
    if lhs._generation != rhs._generation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ImageBot_token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "keyid"),
    3: .same(proto: "generation"),
    4: .same(proto: "unsigned"),
    5: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._keyid) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._generation) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._unsigned) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._keyid {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generation {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._unsigned {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ImageBot_token, rhs: ImageBot_token) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._keyid != rhs._keyid {return false}
    if lhs._generation != rhs._generation {return false}
    if lhs._unsigned != rhs._unsigned {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ImageBot_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "operation"),
    3: .same(proto: "token"),
    4: .same(proto: "prompt"),
    5: .same(proto: "source"),
    6: .same(proto: "mask"),
    7: .same(proto: "apikey"),
    8: .same(proto: "size"),
  ]

  public var isInitialized: Bool {
    if self._operation == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._operation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._prompt) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._source) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self._mask) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._apikey) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._operation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._prompt {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._source {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._mask {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._apikey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ImageBot_request, rhs: ImageBot_request) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._operation != rhs._operation {return false}
    if lhs._token != rhs._token {return false}
    if lhs._prompt != rhs._prompt {return false}
    if lhs._source != rhs._source {return false}
    if lhs._mask != rhs._mask {return false}
    if lhs._apikey != rhs._apikey {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ImageBot_request.OperationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREATE"),
    1: .same(proto: "EDIT"),
  ]
}

extension ImageBot_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "status"),
    3: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._status) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._image) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._image {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ImageBot_response, rhs: ImageBot_response) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._status != rhs._status {return false}
    if lhs._image != rhs._image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
