// -*- mode: swift; swift-mode:basic-offset: 2; -*-
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: components/src/com/google/appinventor/components/runtime/translate/tr.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Unsigned {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// userId of requestor
  var huuid: String {
    get {return _huuid ?? String()}
    set {_huuid = newValue}
  }
  /// Returns true if `huuid` has been explicitly set.
  var hasHuuid: Bool {return self._huuid != nil}
  /// Clears the value of `huuid`. Subsequent reads from it will return its default value.
  mutating func clearHuuid() {self._huuid = nil}

  /// Token structure version #
  var version: UInt64 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  /// used to revoke a compromised token
  var generation: UInt64 {
    get {return _generation ?? 0}
    set {_generation = newValue}
  }
  /// Returns true if `generation` has been explicitly set.
  var hasGeneration: Bool {return self._generation != nil}
  /// Clears the value of `generation`. Subsequent reads from it will return its default value.
  mutating func clearGeneration() {self._generation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _huuid: String? = nil
  fileprivate var _version: UInt64? = nil
  fileprivate var _generation: UInt64? = nil
}

struct Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// version of structure
  var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var keyid: UInt64 {
    get {return _keyid ?? 1}
    set {_keyid = newValue}
  }
  /// Returns true if `keyid` has been explicitly set.
  var hasKeyid: Bool {return self._keyid != nil}
  /// Clears the value of `keyid`. Subsequent reads from it will return its default value.
  mutating func clearKeyid() {self._keyid = nil}

  /// should match top level version
  var generation: UInt64 {
    get {return _generation ?? 0}
    set {_generation = newValue}
  }
  /// Returns true if `generation` has been explicitly set.
  var hasGeneration: Bool {return self._generation != nil}
  /// Clears the value of `generation`. Subsequent reads from it will return its default value.
  mutating func clearGeneration() {self._generation = nil}

  var unsigned: Data {
    get {return _unsigned ?? Data()}
    set {_unsigned = newValue}
  }
  /// Returns true if `unsigned` has been explicitly set.
  var hasUnsigned: Bool {return self._unsigned != nil}
  /// Clears the value of `unsigned`. Subsequent reads from it will return its default value.
  mutating func clearUnsigned() {self._unsigned = nil}

  var signature: Data {
    get {return _signature ?? Data()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _keyid: UInt64? = nil
  fileprivate var _generation: UInt64? = nil
  fileprivate var _unsigned: Data? = nil
  fileprivate var _signature: Data? = nil
}

struct Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var token: Token {
    get {return _token ?? Token()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  var totranslate: String {
    get {return _totranslate ?? String()}
    set {_totranslate = newValue}
  }
  /// Returns true if `totranslate` has been explicitly set.
  var hasTotranslate: Bool {return self._totranslate != nil}
  /// Clears the value of `totranslate`. Subsequent reads from it will return its default value.
  mutating func clearTotranslate() {self._totranslate = nil}

  var languagecode: String {
    get {return _languagecode ?? String()}
    set {_languagecode = newValue}
  }
  /// Returns true if `languagecode` has been explicitly set.
  var hasLanguagecode: Bool {return self._languagecode != nil}
  /// Clears the value of `languagecode`. Subsequent reads from it will return its default value.
  mutating func clearLanguagecode() {self._languagecode = nil}

  var sourcelanguage: String {
    get {return _sourcelanguage ?? String()}
    set {_sourcelanguage = newValue}
  }
  /// Returns true if `sourcelanguage` has been explicitly set.
  var hasSourcelanguage: Bool {return self._sourcelanguage != nil}
  /// Clears the value of `sourcelanguage`. Subsequent reads from it will return its default value.
  mutating func clearSourcelanguage() {self._sourcelanguage = nil}

  var targetlanguage: String {
    get {return _targetlanguage ?? String()}
    set {_targetlanguage = newValue}
  }
  /// Returns true if `targetlanguage` has been explicitly set.
  var hasTargetlanguage: Bool {return self._targetlanguage != nil}
  /// Clears the value of `targetlanguage`. Subsequent reads from it will return its default value.
  mutating func clearTargetlanguage() {self._targetlanguage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _token: Token? = nil
  fileprivate var _totranslate: String? = nil
  fileprivate var _languagecode: String? = nil
  fileprivate var _sourcelanguage: String? = nil
  fileprivate var _targetlanguage: String? = nil
}

struct Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt64 {
    get {return _version ?? 1}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  /// 0 = success, otherwise error code
  var status: UInt64 {
    get {return _status ?? 0}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var translated: String {
    get {return _translated ?? String()}
    set {_translated = newValue}
  }
  /// Returns true if `translated` has been explicitly set.
  var hasTranslated: Bool {return self._translated != nil}
  /// Clears the value of `translated`. Subsequent reads from it will return its default value.
  mutating func clearTranslated() {self._translated = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _status: UInt64? = nil
  fileprivate var _translated: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Unsigned: @unchecked Sendable {}
extension Token: @unchecked Sendable {}
extension Request: @unchecked Sendable {}
extension Response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Unsigned: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Unsigned"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "huuid"),
    2: .same(proto: "version"),
    3: .same(proto: "generation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._huuid) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._generation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._huuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generation {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Unsigned, rhs: Unsigned) -> Bool {
    if lhs._huuid != rhs._huuid {return false}
    if lhs._version != rhs._version {return false}
    if lhs._generation != rhs._generation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "keyid"),
    3: .same(proto: "generation"),
    4: .same(proto: "unsigned"),
    5: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._keyid) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._generation) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._unsigned) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._keyid {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generation {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._unsigned {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Token, rhs: Token) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._keyid != rhs._keyid {return false}
    if lhs._generation != rhs._generation {return false}
    if lhs._unsigned != rhs._unsigned {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "token"),
    3: .same(proto: "totranslate"),
    4: .same(proto: "languagecode"),
    5: .same(proto: "sourcelanguage"),
    6: .same(proto: "targetlanguage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._totranslate) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._languagecode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._sourcelanguage) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._targetlanguage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._totranslate {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._languagecode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._sourcelanguage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._targetlanguage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Request, rhs: Request) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._token != rhs._token {return false}
    if lhs._totranslate != rhs._totranslate {return false}
    if lhs._languagecode != rhs._languagecode {return false}
    if lhs._sourcelanguage != rhs._sourcelanguage {return false}
    if lhs._targetlanguage != rhs._targetlanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "status"),
    3: .same(proto: "translated"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._translated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._translated {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response, rhs: Response) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._status != rhs._status {return false}
    if lhs._translated != rhs._translated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
